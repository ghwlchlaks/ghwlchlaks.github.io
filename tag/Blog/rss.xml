<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ghwlchlaks.github.io/</title>
   
   <link>https://ghwlchlaks.github.io</link>
   <description>같이 배워가는 IT 블로그입니다~. Python, JavaScript, nodejs, Github, algorithm, etc</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[React-native] 설치 방법</title>
	  <link>//react-native-installation</link>
	  <author></author>
	  <pubDate>2019-03-23T09:00:00+09:00</pubDate>
	  <guid>//react-native-installation</guid>
	  <description><![CDATA[
	     <h1 id="해당-게시글은-작성-진행-중입니다"><code class="highlighter-rouge">해당 게시글은 작성 진행 중입니다.</code></h1>

<p>사전의 설치되있어야하는 프로그램
안드로이드 스튜디오, jdk
<a href="[https://facebook.github.io/react-native/docs/getting-started.html]">참고 링크</a></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install -g react-native-cli
</code></pre></div></div>

<h2 id="안드로이드-스튜디오에서-설치할-라이브러리">안드로이드 스튜디오에서 설치할 라이브러리</h2>
<p>Android SDK <br />
Android SDK Platform - Android SDK Platform 28  <br />
Performance (Intel ® HAXM) (See here for AMD)<br />
Android Virtual Device<br />
Intel x86 Atom_64 System Image or Google APIs Intel x86 Atom System Image</p>

<h2 id="안드로이드-sdk-환경변수-설정">안드로이드 sdk 환경변수 설정</h2>
<p><img src="/assets/images/2019-03-23-react-native-installation/sdk_path.png" /></p>

<h2 id="platform-tools-path-설정">platform tools path 설정</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c:\Users\YOUR_USERNAME\AppData\Local\Android\Sdk\platform-tools
</code></pre></div></div>

<h2 id="안드로이드-스튜디오-emulator-실행">안드로이드 스튜디오 emulator 실행</h2>

<h2 id="프로젝트-생성">프로젝트 생성</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>react-native init firstProject
</code></pre></div></div>

<h2 id="연결된-디바이스-검색">연결된 디바이스 검색</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb devices
</code></pre></div></div>
<p><img src="/assets/images/2019-03-23-react-native-installation/adb_list.png" /></p>

<h2 id="프로젝트-안드로이드-emulator로-실행">프로젝트 안드로이드 emulator로 실행</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>react-native run-android
</code></pre></div></div>
<p><img src="/assets/images/2019-03-23-react-native-installation/result_android.png" /></p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[Nosql] 공부 (정리전)</title>
	  <link>//nosql-interview02</link>
	  <author></author>
	  <pubDate>2019-03-04T09:00:00+09:00</pubDate>
	  <guid>//nosql-interview02</guid>
	  <description><![CDATA[
	     <p>NoSql은 키-값이나 컬럼, 문서 형식 등의 데이터 모델을 이용, 비 관계형 데이터베이스
Nosql과 RDBMS와의 다른 점</p>

<ul>
  <li>스키마가 없다. (데이터 관계와 정해진 규격 (table-colmn의 정의))가 없다.</li>
  <li>관계 정의가 없으니 Join이 불가능 (reference(참조)와 같은 기능으로 비슷하게 구현 가능)</li>
  <li>분산처리(수평적 확장)를 쉽게 제공
왜 사용하는가?</li>
  <li>많은 양의 데이터를 효율적으로 처리가 필요할 때</li>
  <li>데이터의 분산처리, 빠른 쓰기가 필요할 떄</li>
  <li>분산처리를 하므로 특정서버에 장애가 발생했을때에도 데이터 유실이나 서비스 중지가 없는 형태의 구조이기 때문에 사용</li>
</ul>

<p>대표적인 Nosql</p>

<ul>
  <li>키-밸류형: redis</li>
  <li>문서형: mongodb</li>
</ul>

<p>Mongodb</p>

<ul>
  <li>문서지향 데이터 베이스 : 내장 문서와 배열을 이용해서 복잡한 계층구조를 하나의 레코드로 표현 할 수 있다.(json, array)</li>
  <li>스키마가 없다. (필드 추가 및 제거가 자유로움)</li>
  <li>RDBMS보다 빠름.</li>
</ul>

<p>Memcached(Remote Dictionary Server)</p>

<ul>
  <li>키-밸류 저장소</li>
  <li>주 사용 사례 : 캐싱, 세션 관리, pub/sub, 순위표 (대형 포털에서는 static page, 검색결과 등을 캐쉬하는데 많이 사용)</li>
  <li>데이터가 메모리에만 저장되므로 빠름 (휘발성) -프로세스가 죽거나 장비가 종료되면 데이터가 사라짐</li>
  <li>만료가 되지 않더라고 더 이상 메모리에 넣을 용량이 없으면 LRU(Least recently used) 알고리즘에 의해 사라진다. (최근에 가장 적게 사용한 데이터 먼저)</li>
</ul>

<p>Redis와 Memcached의 차이점</p>

<ul>
  <li>Redis는 디스크와 메모리에 저장되는데도 속도가 빠르다.</li>
  <li>데이터가 메모리 디스크에 저장되기 때문에 불의의 경우에도 데이터 복구가 가능.</li>
  <li>저장소 메모리 재사용 없음. 명시적으로만 데이터 제거 가능</li>
  <li>Redis는 문자열 ,Set, Sorted set, Hash, List등 다양한 데이터 타입을 지원하지만 Memcached는 문자열만 지원</li>
</ul>

<p>Redis장점</p>

<ul>
  <li>리스트, 배열과 같은 데이터를 처리하는데 용이</li>
  <li>Mysql에 비해서 속도가 빠르다.</li>
  <li>여러 프로세스에서 동시에 같은 key에 대한 갱신을 요청할 경우, 원자성 처리로 데이터 부적합 방지(원자성 처리 함수 제공)</li>
  <li>메모리를 활용하면서 영속적인 데이터 보존</li>
  <li>스냅샷 기능을 제공하여 메모리의 내용을 *.rdb파일로 저장하여 해당 시점으로 복구 할 수 있다.</li>
  <li>명령어를 이용하여 명시적 삭제 혹은 만료일을 설정하지 않으면 데이터가 삭제 되지 않는다.</li>
  <li>Redis는 1개의 싱글 스레드로 수행됨. 따라서 서버하나에 여러 개의 Redis서버를 띄우는 것이 가능 .</li>
  <li>Master - slave 형식으로 구성하여 데이터 분실위험을 없앨 수 있다.
Mongo vs Redis</li>
  <li>쿼리를 많이 사용하는 프로젝트 Mongo</li>
  <li>속도가 제일 우선 -Redis</li>
</ul>

<p>Redis 세션 저장</p>

<ul>
  <li>node에서 redis를 사용하지 않고 express-session만을 사용하여 데이터를 저장하고 있다면 서버를 재시작하는 순간 저장했던 내용들이 날아가게 됨.
서버를 재시작하고도 데이터를 유지하고 싶다면? 데이터베이스를 사용해서 데이터를 유지하는 것. 하지만 MySql, Mongodb와 같은 데이터베이스에 저장하는 것은 비용과 속도가 느림.
이때 사용하는 것이 Redis - 메모리를 이용하기 때문에 속도가 매우 빠름. 노드 클러스링 시 pid가 달라 세션이 유지되지 않는 문제도 레디스를 통해 세션 공유하여 해결.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[JavaScript] 공부 (정리전)</title>
	  <link>//javascript-interview01</link>
	  <author></author>
	  <pubDate>2019-03-03T09:00:00+09:00</pubDate>
	  <guid>//javascript-interview01</guid>
	  <description><![CDATA[
	     <p>Es6</p>

<ul>
  <li>let, const 도입
const와 let은 블록 스코프를 따름
기존 var는 함수 스코프</li>
  <li>let, const도입으로 호이스팅이 일어나지 않는다.
호이스팅이란? 변수의 정의가 선언과 할당으로 분리되어 변수의 선언을 항상 컨텍스트 내의 최상위로 끌어올리는 것을 의미.</li>
  <li>const : 한번초기화하면 재할당이 불가능, 재선언도 불가능</li>
  <li>let : 재할당 가능 재선언 불가능</li>
</ul>

<p>Template Literals
기존</p>

<p>변경</p>

<p>렉시컬 스코프(정적 스코프)</p>

<ul>
  <li>소스코드가 작성된 그 문맥에서 결정되는 스코프</li>
  <li>스코프는 함수를 호출할 때 생기는 것이 아니라 선언할 때 생김.</li>
</ul>

<p>클로저</p>

<ul>
  <li>내부함수가 외부함수의 지역변수의 접근할 수 있고, 외부함수는 외부함수의 지역변수를 사용하는 내부함수가 소멸될 때까지 소멸 되지 않는 특성을 의미한다.</li>
</ul>

<p>스코프체인</p>

<ul>
  <li>변수가 호출되었을 때 자신의 스코프부터 찾고 없으면 점점 올라가서 상위 스코프에서 찾는 것을말한다.</li>
  <li>내부함수에서는 외부함수의 변수에 접근 가능하지만 외부함수에서는 내부함수의 변수에 접근할 수 없다.</li>
</ul>

<p>Exports module.exports require 차이</p>

<ul>
  <li>require는 module을 import할 때 사용한다. 반환 값은 module.exports이다.
모듈이란?
관련된 코드들을 하나의 코드 단위로 캡슐화하는 것.</li>
  <li>exports는 module.exports를 참조하고 있다.
그래서 사용할 때 exports는 객체에 프로퍼티를 추가해서 사용해야하고 module.exports는 변수에 새로운 객체를 할당한다.</li>
</ul>

<p>Es6
화살표 함수에는 없는 것 : 함수이름 , this, arguments</p>

<p>Promise 객체란</p>

<ul>
  <li>비동기 동작이 완료된 이후 성공, 실패 결과를 처리하기 위한 핸들러입니다. 값을 가져오게되면 어떻게 처리를 해주겠다는 일종의 약속</li>
  <li>callback함수를 실행하는 대신에 객체로 사용하는 것이다.</li>
</ul>

<p>Async await란?
Es8(ecma2017)의 공식정의된 문법으로 async, await를 사용하면 비동기 코드를 작성할 때 비교적 쉽고 명확하게 코드를 작성할 수 있따.</p>

<p>자바스크립트는 싱글스레드 프로그래밍언어이기 떄문에 비동기 처리가 필수적입니다. 비동기 처리는 그 결과가 언제 반환될지 알 수 없기 떄문에 동기식으로 처리하는 기법들이 사용되어야하는데 이 때 사용하는 것이 callback, promise, (async, await)입니다.</p>

<p>callback은 많은 callback함수들이 중첩되면 코드의 가독성이 떨어지게됩니다. 이 문제점을 해결하기 위해 promise 개념이 등장합니다. 그 이후 더 절차적이게 보이는 async await 개념이 등장합니다. 주의할 점은 await 뒷부분은 반드시 promise객체를 반환해야한다는 것과 async 함수 자체도 promise를 반환한다는 것입니다.</p>

<p>Await <expression></expression></p>

<ul>
  <li>await 키워드 오른쪽의 표현식은 Promise.resolve()로 감싸여 항상 Promise객체로 간주된다.</li>
  <li>async 함수는 항상 Promise를 리턴하며, 그 성공값은 리턴값과 같다.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function foo() {
    if (true) {
        var name = 'hans';
    }
    console.log(name); // hans
}
foo();
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function foo() {
    if (true) {
        const name = 'hans';
    }
    console.log(name); // Uncaught ReferenceError : name is not defined
}
foo();
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = 3;
var first = 'jeong';
var last = 'pro';
var string = a + 'my name is ' + first + ' ' + last; // '3my name is jeong pro
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = 3;
var first = 'jeong';
var last = 'pro';
const string = `${a}my name is ${first} ${last}`;
Var a =10;
Function foo() {
 Var b= 10;
 Console.log(a) //10
 Console.log(b) //10
}
Console.log(b) //undefined
</code></pre></div></div>

<p>기존</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Const func1 = function() {
  Console.log(arguments);
}
Func(1,2,3,4)
</code></pre></div></div>

<p>Es6</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Const func1 = (…args) =&gt; {
   Consle.log(args)
}
Func1(1,2,3,4)
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>[React] 컴포넌트간의 데이터 전송</title>
	  <link>//react-data-transfer</link>
	  <author></author>
	  <pubDate>2019-03-01T09:00:00+09:00</pubDate>
	  <guid>//react-data-transfer</guid>
	  <description><![CDATA[
	     <p>2개이상의 컴포넌트를 만들게 되면 부모 자식 관계의 컴포넌트가 생성되게 됩니다.<br />
리액트에서 컴포넌트간 데이터를 전송을 해야하는 경우가 많습니다. 이럴때 어떻게 데이터를 전송할 수 있을지 알아보도록하겠습니다.</p>

<blockquote>
  <ol>
    <li>부모에서 자식으로 데이터 전송</li>
    <li>자식에서 부모로 데이터 전송</li>
  </ol>
</blockquote>

<h2 id="1-부모컴포넌트에서-자식컴포넌트로-데이터-전송">1. 부모컴포넌트에서 자식컴포넌트로 데이터 전송</h2>

<p>부모에서 자식으로 데이터를 전송하는 방법은 Props를 이용한 방식을 사용합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Parent extends Component {
    const data = this.state.data;
    render() {
        return (
            &lt;div&gt;
                &lt;Child dataFromParent={data} /&gt;
            &lt;/div&gt;
        )
    }
}
</code></pre></div></div>

<p>위와 같이 <code class="highlighter-rouge">Parent</code> 컴포넌트에서 자식컴포넌트를 렌더링하고있는 상황에 부모컴포넌트는 data라는 값을 자식컴포넌트 dataFromParent로 전달해줍니다.<br />
이때 <code class="highlighter-rouge">Child</code> 컴포넌트에서는 this.props.dataFromParent로 접근하여 데이터를 읽을 수 있습니다.</p>

<h2 id="2-자식컴포넌트에서-부모컴포넌트로-데이터-전송">2. 자식컴포넌트에서 부모컴포넌트로 데이터 전송</h2>

<p>자식에서 부모로 데이터를 전송하는 방법은 states를 이용한 방식을 사용합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Parent extends Component {
    parentCallback = (dataFromChild) =&gt; {
        // 자식 컴포넌트에서 받은 값을 이용한 로직 처리
        this.setState({
            data: dataFromChild
        })
    }

    render() {
        return (
            &lt;div&gt;
                &lt;Child callbackFromParent={this.parentCallback}&gt;
            &lt;/div&gt;
        )
    }
}
</code></pre></div></div>

<p>위와 같이 parentCallback 함수를 <code class="highlighter-rouge">Child</code>에게 전달하여 자식은 this.props.callbackFromParent로 접근 할 수 있습니다. 접근하여 <code class="highlighter-rouge">Parent</code> state값을 변경할 수 있습니다.</p>

<p>1, 2번 부모가 인자를 넘겨주고 자식이 이용하는 방법은 동일하지만 부모가 자식에게 데이터를 전달하는 것은 자식컴포넌트에서 부모컴포넌트의 데이터를 이용한(읽기) 로직을 처리하기 위함이고, 자식 컴포넌트에서 부모컴포넌트로 데이터를 전달하는 것은 부모 state의 값을 변경하기 위함입니다.</p>

<p>간단하게 부모와자식컴포넌트 사이에서 데이터를 교환하는 방법에대해서 알아보았습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>[React] LifeCycle</title>
	  <link>//react-lifecycle</link>
	  <author></author>
	  <pubDate>2019-02-28T09:00:00+09:00</pubDate>
	  <guid>//react-lifecycle</guid>
	  <description><![CDATA[
	     <p>면접을 준비하면서 리액트를 빠르게 배워서 개발을 진행했습니다.<br />
공부하면서 중요한 부분중에 하나가 역시 LifeCycle이었고 어려운 부분이었습니다.</p>

<p>어떠한 내용들이 있는지 정리하는 포스팅을 해보려고 합니다.</p>

<h2 id="생성">생성</h2>

<hr />

<h3 id="1constructor">1.constructor</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>constructor(props) {
    super(props);
}
</code></pre></div></div>

<p>constructor는 생성자 메소드로 컴포넌트가 처음 생성될떄 만들어집니다.
props또한 전달되어집니다.</p>

<h3 id="2componentwillmount-deprecated">2.componentWillMount (deprecated)</h3>

<h3 id="3-render">3. render</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>render {
    return()
}
</code></pre></div></div>

<p>리액트를 하시면 위와 같은 코드를 보실 수 있는데요 jsx문법을 사용하여 렌더링하는 부분입니다.</p>

<h3 id="4-componentdidmount">4. componentDidMount</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>componentDidMount() {
    Document.get...
    axios.get...
}
</code></pre></div></div>

<p>componentDidMount는 3번 render이후에 즉 컴포넌트가 렌더링된 이후 호출되는 메소드로 DOM 조작 및 axios등을 이용한 비동기 데이터 요청을 주로 작성하는 부분입니다.<br />
여기서 주의할점은 componentDidMount 메소드에서 setState를 이용하여 state의 값을 변경하게되면 리렌더링이 되므로 작성하지 않는 것이 좋습니다.</p>

<h2 id="업데이트">업데이트</h2>

<hr />

<h3 id="1-getderivedstatefromprops">1. getDerivedStateFromProps</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>static getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.val !== nextProps.val) {
        return {val: nextProps.val};
    }
    return null;
}
</code></pre></div></div>

<p>getDerivedStateFromProps는 Props가 변할때 state값을 변경해서 리렌링 할 수 있는 메소드입니다.<br />
위와 같이 기본적으로 null을 리턴하며 이전 state의 값과 이후 받은 props의 값을 비교하여 다른 경우에만
state를 변경시켜주는 코드입니다. 여기서 주의하실점은 setState문을 이용하여 state를 변경하는 것이아니라
retrun {val: nextProps.val}의 형태로 반환해준다는 것입니다.</p>

<h3 id="2-shouldcomponentupdate">2. shouldComponentUpdate</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shouldComponentUpdate(nextProps, nextState) {
    if ( this.state.val !== nextState.val) {
        return false;
    }
    return true;
}
</code></pre></div></div>

<p>기본적으로 return하는 값은 true이며 true인경우에는 리렌더링을 진행합니다.<br />
해당 메소드는 성능 최적화를 하기위해서 사용하는 메소드로 굳이 리렌더링을 하지 않아도 되는 state를 막는 것입니다.<br />
위와같이 state혹은 Props를 비교해서 값이 변경된 경우에만 렌더링을 하게 할 수 있습니다.</p>

<h3 id="3-getsnapshotbeforeupdate">3. getSnapshotBeforeUpdate</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>getSnapshotBeforeUpdate(prevProps, prevState) {
    return prevState.val;
}
</code></pre></div></div>

<p>해당 메소드는 수정(update)이 발생하기 바로 전에 호출되는 메소드입니다. 해당 메소드에서 반환한 값은
componentDidupdate에 세번째 매개변수로 전달됩니다. (자주 사용하는 부분은 아닌것같습니다.)<br />
찾아보니 리렌더링되는 동안 스크롤의 위치가 처음으로초기화 되는 것이아니라 기존의 위치로 렌더링되기위해 기존의 위치를 update되기전 넘겨주는 역할을 하는 경우에 사용한다고 합니다.</p>

<h3 id="4-componentdidupdate">4. componentDidUpdate</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>componentDidUpdate(prevProps, prevState, [snapshot]) {
}
</code></pre></div></div>

<p>해당 메소드는 업데이트 처리를 끝내고 render이 된 이후에 실행되는 메소드입니다.<br />
즉 모든 props와 state의 값이 변경이된상태이고 prevProps와 prevState 인자를 이용해 이전의 값들은 읽을 수 있습니다.<br />
또한 세번째 인자인 snapshot은 3번에 getSnapshotBeforeUpdate에서 반환한 데이터입니다.</p>

<h2 id="소멸">소멸</h2>

<hr />

<h3 id="1-componentwillunmount">1. componentWillUnmount</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>componentWillUnmount() {
}
</code></pre></div></div>

<p>해당 메소드는 컴포넌트가 소멸될때 발생하는 메소드로 인스턴스를 제거하는 코드를 작섷해줍니다.</p>

<p>여기까지 큰틀로 실행되는 리액트의 LifeCycle에대해서 알아보았습니다.<br />
deprecated 된것이 꽤 있기 때문에 모든것을 적지는 않았습니다.</p>

<p>저 또한 작성하면서 다시 공부할 수 있었습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>취업 미션 후기</title>
	  <link>//interview-review01</link>
	  <author></author>
	  <pubDate>2019-02-27T09:00:00+09:00</pubDate>
	  <guid>//interview-review01</guid>
	  <description><![CDATA[
	     <h1 id="2주-동안-미션-진행-결과는-탈락">2주 동안 미션 진행.. 결과는 탈락..</h1>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>후기 : 취업 쉽지않네요.. 열심히 했다고 생각했는데 실력이 많이 부족했나봅니다..

오늘은 쉬고 내일부터 다시 또 달려야겠습니다 ㅎㅎ
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>NoSQL 공부01</title>
	  <link>//interview03</link>
	  <author></author>
	  <pubDate>2019-02-10T09:00:00+09:00</pubDate>
	  <guid>//interview03</guid>
	  <description><![CDATA[
	     <h2 id="nosql-공부01">NoSQL 공부01</h2>
<p>NoSql은 키-값이나 컬럼, 문서 형식 등의 데이터 모델을 이용, 비 관계형 데이터베이스 
Nosql과 RDBMS와의 다른 점</p>
<ul>
  <li>스키마가 없다. (데이터 관계와 정해진 규격 (table-colmn의 정의))가 없다.</li>
  <li>관계 정의가 없으니 Join이 불가능 (reference(참조)와 같은 기능으로 비슷하게 구현 가능)</li>
  <li>분산처리(수평적 확장)를 쉽게 제공
왜 사용하는가?</li>
  <li>많은 양의 데이터를 효율적으로 처리가 필요할 때</li>
  <li>데이터의 분산처리, 빠른 쓰기가 필요할 떄</li>
  <li>분산처리를 하므로 특정서버에 장애가 발생했을때에도 데이터 유실이나 서비스 중지가 없는 형태의 구조이기 때문에 사용</li>
</ul>

<p>대표적인 Nosql</p>
<ul>
  <li>키-밸류형: redis</li>
  <li>문서형: mongodb</li>
</ul>

<p>Mongodb</p>
<ul>
  <li>문서지향 데이터 베이스 : 내장 문서와 배열을 이용해서 복잡한 계층구조를 하나의 레코드로 표현 할 수 있다.(json, array)</li>
  <li>스키마가 없다. (필드 추가 및 제거가 자유로움)</li>
  <li>RDBMS보다 빠름.</li>
</ul>

<p>Memcached(Remote Dictionary Server)</p>
<ul>
  <li>키-밸류 저장소</li>
  <li>주 사용 사례 : 캐싱, 세션 관리, pub/sub, 순위표  (대형 포털에서는 static page, 검색결과 등을 캐쉬하는데 많이 사용)</li>
  <li>데이터가 메모리에만 저장되므로 빠름 (휘발성)
-프로세스가 죽거나 장비가 종료되면 데이터가 사라짐</li>
  <li>만료가 되지 않더라고 더 이상 메모리에 넣을 용량이 없으면 LRU(Least recently used) 알고리즘에 의해 사라진다. (최근에 가장 적게 사용한 데이터 먼저)</li>
</ul>

<p>Redis와 Memcached의 차이점</p>
<ul>
  <li>Redis는 디스크와 메모리에 저장되는데도 속도가 빠르다.</li>
  <li>데이터가 메모리 디스크에 저장되기 때문에 불의의 경우에도 데이터 복구가 가능.</li>
  <li>저장소 메모리 재사용 없음. 명시적으로만 데이터 제거 가능</li>
  <li>Redis는 문자열 ,Set, Sorted set, Hash, List등 다양한 데이터 타입을 지원하지만 Memcached는 문자열만 지원</li>
</ul>

<p>Redis장점</p>
<ul>
  <li>리스트, 배열과 같은 데이터를 처리하는데 용이</li>
  <li>Mysql에 비해서 속도가 빠르다.</li>
  <li>여러 프로세스에서 동시에 같은 key에 대한 갱신을 요청할 경우, 원자성 처리로 데이터 부적합 방지(원자성 처리 함수 제공)</li>
  <li>메모리를 활용하면서 영속적인 데이터 보존</li>
  <li>스냅샷 기능을 제공하여 메모리의 내용을 *.rdb파일로 저장하여 해당 시점으로 복구 할 수 있다.</li>
  <li>명령어를 이용하여 명시적 삭제 혹은 만료일을 설정하지 않으면 데이터가 삭제 되지 않는다.</li>
  <li>Redis는 1개의 싱글 스레드로 수행됨. 따라서 서버하나에 여러 개의 Redis서버를 띄우는 것이 가능 .</li>
  <li>Master - slave 형식으로 구성하여 데이터 분실위험을 없앨 수 있다. 
Mongo vs Redis</li>
  <li>쿼리를 많이 사용하는 프로젝트 Mongo</li>
  <li>속도가 제일 우선 -Redis</li>
</ul>

<p>Redis 세션 저장</p>
<ul>
  <li>node에서 redis를 사용하지 않고 express-session만을 사용하여 데이터를 저장하고 있다면 서버를 재시작하는 순간 저장했던 내용들이 날아가게 됨. 
서버를 재시작하고도 데이터를 유지하고 싶다면? 데이터베이스를 사용해서 데이터를 유지하는 것. 하지만 MySql, Mongodb와 같은 데이터베이스에 저장하는 것은 비용과 속도가 느림. 
이때 사용하는 것이 Redis - 메모리를 이용하기 때문에 속도가 매우 빠름.  노드 클러스링 시 pid가 달라 세션이 유지되지 않는 문제도 레디스를 통해 세션 공유하여 해결.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Git 공부01</title>
	  <link>//interview02</link>
	  <author></author>
	  <pubDate>2019-02-09T09:00:00+09:00</pubDate>
	  <guid>//interview02</guid>
	  <description><![CDATA[
	     <h2 id="git-공부01">Git 공부01</h2>
<p>git clone</p>
<ul>
  <li>원격저장소를 복제하여 가져온다.</li>
</ul>

<p>git add</p>
<ul>
  <li>워킹디렉토리에 있는 파일들은 stage영역으로 추가하는 것 . 추가하게되면 commit-을 이용한 스냅샷저장에 포함되어진다.</li>
</ul>

<p>git commit</p>
<ul>
  <li>저장소의 스냅샷을 찍기위한 명령어. 한 개한개가 버전업이되는것이다</li>
</ul>

<p>git branch</p>
<ul>
  <li>메인 브랜치 혹은 작업할 브랜치에서 분기를 하여 작업할 수 있는 공간을 말한다.</li>
</ul>

<p>git checkout</p>
<ul>
  <li>브랜치로 이동혹은 특정 버전(커밋)으로 이동하는 명령어</li>
</ul>

<p>git statsh</p>
<ul>
  <li>unstaged 상태(add하지 않은 상태)인 변경사항을 일시적으로 백업하고 워킹디렉토리를(작업디렉토리)를 깨끗한 상태로 유지(HEAD) 상태로</li>
  <li>그 후 rebase나 pull값은 작업을 할 수 있음</li>
  <li>그 후 git statsh pop or git stash apply를 사용하여 워킹디렉토리에 백업한 내용을 적용할 수 있습니다.</li>
</ul>

<p>git push</p>
<ul>
  <li>로컬저장소에 저장된 (add, commit이된) 파일들을 원격저장소에 업로드한다.</li>
</ul>

<p>git merge</p>
<ul>
  <li>브랜치를 합친다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>웹 공부01</title>
	  <link>//interview01</link>
	  <author></author>
	  <pubDate>2019-02-08T09:00:00+09:00</pubDate>
	  <guid>//interview01</guid>
	  <description><![CDATA[
	     <h2 id="웹-공부01">웹 공부01</h2>
<p>Fetch api를 이용하면 request나 response와 같은 HTTP의 파이프라인을 구성하는 요소를 조작하는 것이 가능.
XMLHttpRequest 객체를 사용해 서버와 상호작용을 살 수 있습니다. 페이지 전체의 데이터를 새로 받아오지 않고도 특정 URL로부터 데이터를 받아 올 수 있습니다. 이를 이용해 웹페이지는 용자를 방해하지 않고도 페이지의 일부분만을 업데이트 할 수 있습니다.</p>

<p>Fetch vs axios</p>
<ul>
  <li>fetch api 는 간편하게 사용이 가능하지만 요청 취소가 불가능하다는 점이 있습니다.</li>
</ul>

<p>GET - 요청받은 URI의 정보를 검색하여 응답 (READ)
HEAD - 응답코드와 HEAD만 응답한다. (웹서버 정보확인, 헬스 체크, 버전확인, 최종 수정일자 확인등의 용도)
POST - 요청된 자원을 생성한다. (CREAT)
PUT - 요청된 자원을 수정한다. (전체 UPDATE)
PATCH - 요청된 자원을 수정(일부분 UPDATE)
DELETE - 요청된 자원을 삭제할 것을 요청(DELETE)</p>

<p>응답코드 
200 - 성공
300 - 리다이렉션
400 - 클라이언트 요청 실패 
500 - 서버 에러</p>

<p>Html doctype</p>
<ul>
  <li>해당 소스를 읽을 때 웹문서가 html5로 작성되었음을 알려준다. 웹페이지 문서 종류를 알려주는 선언문 웹페이지 제일 처음에 선언되어야하는 것</li>
</ul>

<p>이벤트 버블링</p>
<ul>
  <li>특정 화면 요소에서 이벤트가 발생했을 때 해당 이벤트가 더 상위의 화면 요소들로 전달되어 가는 특성을 의미</li>
</ul>

<p>이벤트 캡처</p>
<ul>
  <li>버블링과는 반대되는 개념으로 이벤트가 발생했을떄 해당 이벤트가 하위의 화면 요소로 전달되어가는 특성을 의미 (옵션으로 capture: true를 설정)
.
이벤트 위임 
-이벤트 캡처, 이벤트버블링을 이용한 방법으로 리스트가 동적으로 추가되는 상황에 이벤트를 매번 추가하는 번거로움을 상위 태그에 이벤트를 지정하여 처리하는 것</li>
</ul>

<p>http</p>
<ul>
  <li>인터넷상에서 정보를 주고받기위한 프로토콜</li>
  <li>클라이언트와 서버사이에 이루어치는 프로토콜 
https</li>
  <li>모든 http 요청과 응답데이터는 네트워크로 보내지기전에 암호화된다.</li>
  <li>https는 http의 하부에 ssl과 같은 보안 계층을 제공함으로써 동작
Ssl 디지털 인증서</li>
  <li>클라이언트와 서버간의 통신을 제 3자가 보증해주는 전자화된 문서
인증과정</li>
  <li>클라이언트가 서버에 요청한 직후에 서버는 클라이언트에게 인증서정보를 전달</li>
  <li>클라이언트는 신뢰할수 있는 서버인지 확인</li>
  <li>클라이언트 공개키 방식으로 암호화해서 서버에게 전달</li>
  <li>서버는 비공개키로 복호화하여 서버와 클라이언트가 세션키를 공유</li>
  <li>데이터 교환</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>[Angular] Angular Http Ajax 사용하기</title>
	  <link>//angular-http</link>
	  <author></author>
	  <pubDate>2019-01-27T09:00:00+09:00</pubDate>
	  <guid>//angular-http</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에 포스팅할 내용은 Angular에서 http 방법으로 Api 호출하는 방법에대해서 포스팅하겠습니다.</p>

<h2 id="순서">순서</h2>
<blockquote>
  <ul>
    <li>라이브러리 설치</li>
    <li>service 파일 생성</li>
    <li>module 파일 수정</li>
    <li>service 파일 수정</li>
    <li>사용</li>
  </ul>
</blockquote>

<p><strong>1. 라이브러리 설치</strong><br />
http 라이브러리를 사용하기위해 아래 명령어를 이용하여 설치 해줍니다. 
기본적으로 @angular라이브러리들은 설치가 되있겠지만 혹시 설치가 안되있는경우 설치해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">npm</span> <span class="n">install</span> <span class="vi">@angular</span><span class="o">/</span><span class="n">http</span>
<span class="n">npm</span> <span class="n">install</span> <span class="n">rxjs</span><span class="o">-</span><span class="n">compat</span> </code></pre></figure>

<p><strong>2. service 파일 생성</strong><br />
http 라이브러리를 관리하기위해 파일을 생성해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">ng</span> <span class="n">generate</span> <span class="n">service</span> <span class="n">services</span><span class="o">/</span><span class="err">파일이름</span></code></pre></figure>

<p><strong>3. module 파일 수정</strong><br />
app.module혹은 컴포넌트에 상위에서 사용하는 module 파일을 수정해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="p">{</span><span class="no">HttpModule</span><span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/http'</span><span class="p">;</span>     
<span class="n">import</span> <span class="p">{</span><span class="no">ApiService</span><span class="p">}</span> <span class="n">from</span> <span class="s1">'../services/service파일이름'</span>
<span class="ss">imports: </span><span class="p">[</span><span class="no">HttpModule</span><span class="p">]</span>  
<span class="ss">providers: </span><span class="p">[</span><span class="no">ApiSerice</span><span class="p">]</span></code></pre></figure>

<p><strong>4. service 파일 수정</strong><br />
2번에서 생성한 service파일을 수정해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">export</span> <span class="k">class</span> <span class="nc">HomeModule</span> <span class="p">{</span> <span class="p">}</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">Injectable</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span><span class="no">Http</span><span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/http'</span><span class="p">;(</span><span class="err">추가</span><span class="p">)</span>
<span class="vi">@Injectable</span><span class="p">({</span>
<span class="ss">providedIn: </span><span class="s1">'root'</span>
<span class="p">})</span>
<span class="n">export</span> <span class="k">class</span> <span class="nc">ApiService</span> <span class="p">{</span>
<span class="n">constructor</span><span class="p">(</span><span class="kp">private</span> <span class="ss">http: </span><span class="no">Http</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="n">getIpAddress</span><span class="p">():</span> <span class="no">Observable</span><span class="o">&lt;</span><span class="no">Object</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="p">(</span><span class="err">추가</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">this</span><span class="p">.</span><span class="nf">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'localhost:3000/'</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="ss">data: </span><span class="no">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">data</span><span class="p">.</span><span class="nf">json</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>5. 사용</strong><br />
Api를 사용할 컴포넌트 파일을 수정해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"> 
<span class="n">import</span> <span class="p">{</span><span class="no">ApiService</span><span class="p">}</span> <span class="n">from</span> <span class="s1">'./services/service파일이름'</span>
<span class="n">constructor</span><span class="p">(</span> <span class="kp">private</span> <span class="ss">apiSerivce: </span><span class="no">ApiService</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span> 
<span class="n">apiService</span><span class="p">.</span><span class="nf">getData</span><span class="p">().</span><span class="nf">subscribe</span><span class="p">((</span><span class="n">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
<span class="p">})</span></code></pre></figure>

<p>위와같이 작성하게되면 localhost:3000으로 api요청이 들어와 값이 반환되게됩니다.<br />
물론 3000포트의 서버는 작성이 되있으셔야겠죠??</p>

<p>지금까지 <strong>Angular Http Ajax 사용하기</strong>이라는 주제로 포스팅하였습니다!</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>


</channel>
</rss>
