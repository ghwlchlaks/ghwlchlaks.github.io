<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ghwlchlaks.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>같이 배워가는 IT 블로그입니다~. Python, JavaScript, nodejs, Github, algorithm, etc</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[Express] Typescript를 이용한 express, node초기 설정</title>
	  <link>//express-setup-typescript</link>
	  <author></author>
	  <pubDate>2019-01-03T09:00:00+09:00</pubDate>
	  <guid>//express-setup-typescript</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다. 
2019년 기해년에 첫 게시글이 되겠네요.ㅎㅎ<br />
모두 새해 복 많이 받으세요~</p>

<p>이번에 포스팅할 내용은 JavaScript가 아니라 TypeScript를 이용하여 Node 서버 초기 환경 설정하는 방법에 대해서 
포스팅 하겠습니다.</p>

<p>TypeScript와 JavaScript의 차이는 다른 게시글에서 포스팅하도록 하겠습니다.</p>

<p>먼저 해당 게시물은 node가 설치 되어있다는 가정하에 시작하도록 하겠습니다.<br />
혹시 설치가 안되있는 분은 설치 방법을 링크하도록 하겠습니다.</p>

<p><a href="https://ghwlchlaks.github.io/nodejs-installation-window/">윈도우 설치</a><br />
<a href="https://ghwlchlaks.github.io/nodejs-installation-ubuntu/">리눅스 설치</a></p>

<p>먼저 typescript를 이용하여 node 서버 구동을 위한 환경 설정은 다양한 방법들이 존재합니다. 
해당 방법도 여러가지 방법 중 하나라고 생각하시고 보시면 좋을것 같습니다.</p>

<p><strong>순서</strong></p>
<blockquote>
  <ul>
    <li>폴더 생성 및 node 폴더로 초기화.</li>
    <li>devloperment 의존성 설치</li>
    <li>express 설치</li>
    <li>tsconfig.json 생성 및 작성</li>
    <li>tslint 생성 및 설정</li>
    <li>package.json 수정</li>
    <li>node server 구동</li>
  </ul>
</blockquote>

<p><strong>1. 폴더 생성 및 node 폴더로 초기화.</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mkdir</span> <span class="n">typescript</span><span class="o">-</span><span class="n">node</span>
<span class="n">cd</span> <span class="n">typescript</span><span class="o">-</span><span class="n">node</span>
<span class="n">npm</span> <span class="n">init</span></code></pre></figure>

<p>npm init 명령어를 입력하게 되면 여러가지 적는 칸과 선택 하는 항목이 출력되게됩니다. 
특별하게 설정할 것이없다면 모두 default로 설정해주시면 됩니다.</p>

<p><strong>2. devloperment 의존성 설치</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="no">D</span> <span class="n">typescript</span>
<span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="no">D</span> <span class="n">nodemon</span>
<span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="no">D</span> <span class="n">tslint</span></code></pre></figure>

<p>Typescript로 진행 할 예정이니 당연히 typescript를 설치 해야겠죠?
nodemon은 개발시 auto refresh가 되기 때문에 개발 편의를 위해 설치 해줍니다
tslint는 개발 시 정해놓은 어법을 맞추기 위해 설치 해줍니다.<br />
문서에서는 코딩스타일, 코딩 표준을 맞추기 위한 방법이라고 설명되어있네요 ㅎㅎ</p>

<p><strong>3. express 설치</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">npm</span> <span class="n">install</span> <span class="n">express</span>
<span class="n">npm</span> <span class="n">install</span> <span class="vi">@types</span><span class="o">/</span><span class="n">express</span></code></pre></figure>

<p>express로 서버를 구성할 것이기 떄문에 express모듈을 추가적으로 설치 해줍니다.</p>

<p><strong>4. tsconfig.json 생성 및 작성</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">{</span>
    <span class="s2">"compilerOptions"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s2">"module"</span><span class="p">:</span> <span class="s2">"commonjs"</span><span class="p">,</span>
        <span class="s2">"esModuleInterop"</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
        <span class="s2">"target"</span><span class="p">:</span> <span class="s2">"es6"</span><span class="p">,</span>
        <span class="s2">"noImplicitAny"</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
        <span class="s2">"moduleResolution"</span><span class="p">:</span> <span class="s2">"node"</span><span class="p">,</span>
        <span class="s2">"sourceMap"</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
        <span class="s2">"outDir"</span><span class="p">:</span> <span class="s2">"dist"</span><span class="p">,</span>
        <span class="s2">"baseUrl"</span><span class="p">:</span> <span class="s2">"."</span><span class="p">,</span>
        <span class="s2">"paths"</span><span class="p">:</span> <span class="p">{</span>
            <span class="s2">"*"</span><span class="p">:</span> <span class="p">[</span>
                <span class="s2">"node_modules/*"</span><span class="p">,</span>
                <span class="s2">"src/types/*"</span>
            <span class="p">]</span>
        <span class="p">},</span>
        <span class="s2">"lib"</span><span class="p">:</span> <span class="p">[</span>
            <span class="s2">"es2015"</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="s2">"include"</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">"src/**/*"</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></figure>

<p>tsconfig.json 파일을 생성후 해당 내용을 넣어줍니다. 
typescript는 compile을 통해 javascript파일을 생성하고 구동합니다.<br />
그렇기 때문에 compile option을 지정하고 compile할 경로 include를 지정해 줍니다. <br />
대표적으로  include에 파일들을 lib에 express버전을통해 compile하고 outDir에 경로에 javascript파일을 생성합니다.</p>

<p><strong>5. tslint 생성 및 설정</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">.</span><span class="nf">/</span><span class="n">node_modules</span><span class="o">/</span><span class="p">.</span><span class="nf">bin</span><span class="o">/</span><span class="n">tslint</span> <span class="o">--</span><span class="n">init</span></code></pre></figure>

<p>tslint 설정을 위해 생성해줍니다. 
그 후 tslint.json에 내용을 수정해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">{</span>
    <span class="s2">"defaultSeverity"</span><span class="p">:</span> <span class="s2">"error"</span><span class="p">,</span>
    <span class="s2">"extends"</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">"tslint:recommended"</span>
    <span class="p">],</span>
    <span class="s2">"jsRules"</span><span class="p">:</span> <span class="p">{},</span>
    <span class="s2">"rules"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s2">"interface-name"</span><span class="p">:</span> <span class="p">[</span><span class="kp">false</span><span class="p">],</span>
        <span class="s2">"no-console"</span><span class="p">:</span> <span class="p">[</span><span class="kp">false</span><span class="p">],</span>
        <span class="s2">"quotemark"</span><span class="p">:</span> <span class="p">[</span><span class="kp">true</span><span class="p">,</span> <span class="s2">"single"</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="s2">"rulesDirectory"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span></code></pre></figure>

<p>기본적인 lint이외에 다른 옵션들은 검색을 통해 쉽게 찾으실 수 있습니다.</p>

<p><strong>6. package.json 수정</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">{</span>
  <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"typescript-node"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="p">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
  <span class="s2">"description"</span><span class="p">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"main"</span><span class="p">:</span> <span class="s2">"dist/server.js"</span><span class="p">,</span>
  <span class="s2">"scripts"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"build-ts"</span><span class="p">:</span> <span class="s2">"tsc"</span><span class="p">,</span>
    <span class="s2">"start"</span><span class="p">:</span> <span class="s2">"npm run serve"</span><span class="p">,</span>
    <span class="s2">"serve"</span><span class="p">:</span> <span class="s2">"node dist/server.js"</span><span class="p">,</span>
    <span class="s2">"watch-node"</span><span class="p">:</span> <span class="s2">"nodemon dist/server.js"</span><span class="p">,</span>
    <span class="s2">"watch-ts"</span><span class="p">:</span> <span class="s2">"tsc -w"</span>
  <span class="p">},</span>
  <span class="s2">"author"</span><span class="p">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"license"</span><span class="p">:</span> <span class="s2">"ISC"</span><span class="p">,</span>
  <span class="s2">"devDependencies"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"nodemon"</span><span class="p">:</span> <span class="s2">"^1.18.3"</span><span class="p">,</span>
    <span class="s2">"tslint"</span><span class="p">:</span> <span class="s2">"^5.11.0"</span><span class="p">,</span>
    <span class="s2">"typescript"</span><span class="p">:</span> <span class="s2">"^3.0.1"</span>
  <span class="p">},</span>
  <span class="s2">"dependencies"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"@types/express"</span><span class="p">:</span> <span class="s2">"^4.16.0"</span><span class="p">,</span>
    <span class="s2">"express"</span><span class="p">:</span> <span class="s2">"^4.16.3"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>수정해야할 부분은 main, scripts에 있는 내용입니다. 이외에 내용은 앞에서 설치하며 진행했기 때문에 
수정하지 않아도 될 것입니다.<br />
<code class="highlighter-rouge">scripts</code> 부분은 node 서버를 구동하기위해 사용하는 script들입니다.</p>

<p><strong>7. node server 구동</strong>
기본적인 설정이 끝이 났습니다. 이제 서버를 실행시켜 구동해보도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">npm</span> <span class="n">run</span> <span class="n">watch</span><span class="o">-</span><span class="n">ts</span></code></pre></figure>

<p>다른 터미널에서</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">npm</span> <span class="n">run</span> <span class="n">watch</span><span class="o">-</span><span class="n">node</span></code></pre></figure>

<p>그 후 <code class="highlighter-rouge">http://localhost:3000</code>에 접속해보시면 server가 구동된것을 확인 하실 수 있습니다.</p>

<p>다음 링크는 초기 환경 설정이 된 폴더 입니다.</p>

<p><a href="https://github.com/ghwlchlaks/typescript-express-example">Typescript-node-boilerplate</a></p>

<p>지금까지 <strong>typescript를 이용한 express, node초기 설정</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL2] 땅 따먹기 [파이썬]</title>
	  <link>//Algorithm-land</link>
	  <author></author>
	  <pubDate>2018-12-23T09:00:00+09:00</pubDate>
	  <guid>//Algorithm-land</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은  <strong>프로그래머스 문제 LEVEL2에 해당되는 땅 따먹기 문제</strong>를 풀어보도록 하겠습니다.</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/12913">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>땅은 총 N행 4열로 이루어져있습니다. 1행부터 땅을 밟으며 한 행씩 내려옵니다. 각 행은 한칸씩 밝아야하며, 같은 열을 연속해서 밟을 수는 없습니다. 이때 마지막행에서 최고 점을 받는 점수를 리턴하시오.</p>

<p>입출력 예제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/12913">프로그래머스 웹페이지</a>에서 확인하세요!</p>

<p><strong>제한 사항</strong></p>
<blockquote>
  <ul>
    <li>행의 개수 N: 100,000 이하의 자연수</li>
    <li>열의 개수 4, 땅은 2차원 배열</li>
    <li>점수 : 100이하의 자연수</li>
  </ul>
</blockquote>

<p>해당 문제는 <strong>dp(다이나믹 프로그래밍)</strong>에 대표적인 문제이기도 합니다.
dp를 풀면서 해당 문제를 풀어보도록 하겠습니다.</p>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">land</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span>
        <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="n">land</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span>
    
    <span class="k">return</span> <span class="n">max</span><span class="p">(</span><span class="n">land</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span></code></pre></figure>

<p>i+1번째행에 최댓값은 이전 행에 최댓값을 더한겁니다. <br />
또한 자기 자신에 열을 연속해서 밟으면 안되므로 자신을 제외한 열의 max값을 구합니다. <br />
즉 하나의 행열에서의 최댓값을 구하는 식은 <code class="highlighter-rouge">land[i+1][0] = max(land[i][1], land[i][2], land[i][3]) + land[i+1][0]</code>  입니다. <br />
그러면 마지막 행에는 모든 경로의 최댓값이 들어가게됩니다. <br />
마지막행에서 최댓값을 구하면 위에 조건을 만족하면서 최대점수를 구할 수 있습니다.</p>

<p>다이나믹 프로그래밍은 아직 너무 어렵네요.. ㅠㅠ 좀 더 공부하도록 하겠습니다.!</p>

<p>지금까지 <strong>프로그래머스 문제 LEVEL2에 해당되는 땅 따먹기 문제</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL2] 이상한 문자 만들기 [파이썬]</title>
	  <link>//Algorithm-strangeChar</link>
	  <author></author>
	  <pubDate>2018-12-22T09:00:00+09:00</pubDate>
	  <guid>//Algorithm-strangeChar</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은  <strong>프로그래머스 문제 LEVEL2에 해당되는 이상한 문자 만들기 알고리즘 문제</strong>를 풀어보도록 하겠습니다.</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/12930">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>문자열 s는 공백 문자로 구분되어 있습니다. 각 단어의 홀수는 소문자로, 짝수는 대문자로 바꿔 리턴하는 함수를 작성하시오.</p>

<p>입출력 예제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/12930">프로그래머스 웹페이지</a>에서 확인하세요!</p>

<p><strong>제한 사항</strong></p>
<blockquote>
  <ul>
    <li>문자열 전체가 아닌 단어 공백으로 인덱스를 판별해아합니다.</li>
  </ul>
</blockquote>

<p>저의 처음 풀이 방법은  아래와 같습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">answer</span> <span class="o">=</span> <span class="s2">""</span>
<span class="k">for</span> <span class="n">datas</span> <span class="k">in</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">():</span>
    <span class="n">c_data</span> <span class="o">=</span> <span class="s2">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="ss">data:
        </span><span class="k">if</span> <span class="n">i</span> <span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">c_data</span> <span class="o">+=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
        <span class="ss">else:
            </span><span class="n">c_data</span> <span class="o">+=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span>
    <span class="n">answer</span> <span class="o">+=</span> <span class="n">c_data</span> <span class="o">+</span> <span class="s2">" "</span>
    <span class="n">retrun</span> <span class="n">answer</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> </code></pre></figure>

<p>처음 저의 생각은 단순히 문장을 split() 하여 각 단어별로 짝수, 홀수를 판단하여 대문자(upper), 소문자(lower)로 해결해겠다는 생각을 하였습니다. 이렇게 하게되면 입축력 예제는 통과하지만 제출을 하게되면 많은 실패가 출력되는 것을 보실 수 있을것입니다.</p>

<p>또는 위에 코드를 이렇게 줄일 수 있습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">return</span> <span class="s1">' '</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">c</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">c</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="k">in</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">w</span><span class="p">)])</span> <span class="k">for</span> <span class="n">w</span> <span class="k">in</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">())</span></code></pre></figure>

<p>훨씬 깔끕해졌죠? 하지만 실패한 것을 해결하기 위해 조건을 생각해보았습니다.</p>
<blockquote>
  <ol>
    <li>위에 해당하는 것처럼 인덱스 별로 짝수, 홀수를 판단하여 대문자, 소문자로 변경해야합니다.</li>
    <li>(중요!) 이전까지 작성한 코드는 마지막 공백(“ “)을 strip()으로 제거하는 것을 보실 수 있습니다. 
하지만 문자열 마지막에 공백문자가 있다면 당연히 오류가 나겠죠? 이 조건을 생각하여 해결하면 해당 문제를 풀 수 있습니다.</li>
  </ol>
</blockquote>

<p>다음은 통과한 풀이 방법 입니다.</p>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="n">dx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="s2">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s2">" "</span><span class="p">:</span>
            <span class="n">dx</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="s2">" "</span>
            <span class="n">continue</span>
        <span class="k">if</span> <span class="n">dx</span> <span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
        <span class="ss">else:
            </span><span class="n">answer</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span>
        <span class="n">dx</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">answer</span></code></pre></figure>

<p>문자열을 split()로 쪼개지않고 전체를 for문을 돌린후 단어별로 짝수 홀수를 판단하여 대문자, 소문자로 변환합니다.(조건1)<br />
그 후 마지막 문자열에 공백이 존재할 수 있기 때문에 그대로 문자열에 더하여 저장하는 코드입니다. (조건2) 
이러한 방식으로 풀면 해당 문제를 해결 할 수 있습니다. 
계속 실패하길래 어디가 문제인가 싶었더니 조건을 더 생각해야한다는 것을 알았습니다.. ㅠㅠ</p>

<p>이부분에서 많은 분들이 실수하시는 것같습니다.</p>

<p>지금까지 <strong>프로그래머스 문제 LEVEL2에 해당되는 이상한 문자 만들기 알고리즘 문제</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL1] 완주하지 못한 선수 프로그래머스 해시 [파이썬]</title>
	  <link>//Algorithm-finalplayer</link>
	  <author></author>
	  <pubDate>2018-12-18T21:00:00+09:00</pubDate>
	  <guid>//Algorithm-finalplayer</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은 스택/큐에 해당되는 <strong>프로그래머스 문제 LEVEL1에 해당되는 완주하지 못한 선수 알고리즘 문제</strong>를 풀어보도록 하겠습니다.</p>

<p>오랜만에 알고리즘 문제를 풀어보도록 하겠습니다 ㅎㅎ</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/42576">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>마라톤에 참여한 선수들의 이름이 담긴 배열과 완주한 선수들의 이름이 담긴배열이 주어질 때, 완주하지 못한 선수의 이름을 return하는 문제입니다.</p>

<p>입출력 예제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/42576">프로그래머스 웹페이지</a>에서 확인하세요!</p>

<p><strong>제한 사항</strong></p>
<blockquote>
  <ul>
    <li>참여 선수의 수는 1명 이상 100,000명 이하입니다.</li>
    <li>마라톤에 참여한 배열의 길이는 완주한 선수들의 배열보다 큽니다.</li>
    <li>참가자의 이름은 1개이상 20개이하의 알파벳 소문자로 이루어져있습니다.</li>
    <li>참가자 중에는 동명이인이 있을수 있습니다.</li>
  </ul>
</blockquote>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="n">collections</span>
<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">participant</span><span class="p">,</span> <span class="n">completion</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">list</span><span class="p">((</span><span class="n">collections</span><span class="o">.</span><span class="no">Counter</span><span class="p">(</span><span class="n">participant</span><span class="p">)</span> <span class="o">-</span><span class="n">collections</span><span class="o">.</span><span class="no">Counter</span><span class="p">(</span><span class="n">completion</span><span class="p">)).</span><span class="nf">keys</span><span class="p">())[</span><span class="mi">0</span><span class="p">]</span></code></pre></figure>

<p>해당 문제는 collections를 이용하여 해결하였습니다. <br />
collections.Counter(list) 메소드는 리스트를 dictionary 형태로 숫자를 세서 반환합니다.</p>

<p>예를들어</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="n">collections</span>
<span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span> <span class="p">,</span><span class="s2">"a"</span><span class="p">]</span>
<span class="n">collections</span><span class="o">.</span><span class="no">Counter</span><span class="p">(</span><span class="n">list</span><span class="p">)</span></code></pre></figure>

<p>일때 결과 값은 <code class="highlighter-rouge">{a:2, b: 1, c:1}</code>입니다.
해당 형태로 다른 딕셔너리 형태와 사칙연산을 할 수 있습니다.</p>

<p>즉 참가자 중에 동명이인이 있으므로 collections.Counter() 메소드를 이용하여 참가자 수와 완주한 사람의 수를 딕셔너리 형태로 얻은 후 남은 값들은 완주하지 못한 사람이 됩니다.
해당 값에서 key를 출력하면 간단히 문제를 해결 할 수 있습니다.</p>

<p>지금까지 <strong>완주하지 못한 선수 프로그래머스 해시 [파이썬]</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>일반적으로 .gitignore에 등록하는 파일 [Git]</title>
	  <link>//gitignore-filelist</link>
	  <author></author>
	  <pubDate>2018-12-13T09:00:00+09:00</pubDate>
	  <guid>//gitignore-filelist</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 <strong>일반적으로 .gitignore에 등록하는 파일</strong>에 대해서 포스팅하겠습니다.</p>

<p>.gitignore는 git에 올리지 말아야하거나 올릴 필요가 없는 파일을 미리 등록하여 git add를 통해 staging영역에 올라가지 않는 파일을 설정한 파일을 말합니다.
파일 명은 <code class="highlighter-rouge">.gitignore</code>입니다.</p>

<p>이때 일반적으로 올리지 않는 형식에대해서 다뤄보고자 합니다.</p>

<p><strong>순서</strong></p>
<blockquote>
  <ol>
    <li>실행파일 제외</li>
    <li>로그파일 제외</li>
    <li>문서 파일 제외</li>
    <li>패키지 파일 제외</li>
    <li>OS용 시스템 파일 제외</li>
    <li>자신의 에디터[Eclipse, VSCode] 설정 파일 제외</li>
  </ol>
</blockquote>

<p><strong>1. 실행파일 제외</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">*</span><span class="p">.</span><span class="nf">dll</span>
<span class="o">*</span><span class="p">.</span><span class="nf">exe</span>
<span class="o">*</span><span class="p">.</span><span class="nf">o</span>
<span class="o">*</span><span class="p">.</span><span class="nf">so</span>
<span class="o">*</span><span class="p">.</span><span class="nf">com</span>
<span class="o">*</span><span class="p">.</span><span class="nf">class</span>
<span class="c1">#=&gt; 컴파일된 결과물입니다. 올릴 이유가 없겠죠?</span>
<span class="c1">#=&gt; *은 모두들 아시다시피 전체를 뜻하는 별칭입니다. 앞으로 많이 사용됩니다~</span></code></pre></figure>

<p><strong>2. 로그파일 제외</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">*</span><span class="p">.</span><span class="nf">log</span>
<span class="n">logs</span><span class="o">/</span>
<span class="c1">#=&gt; 로그파일은 개발자마다 다르니 올릴 이유가 없겠죠?</span>
<span class="c1">#=&gt; 폴더를 등록할경우 위에처럼 logs/ 선언하면됩니다. 그러면 logs폴더 내부에 모든 파일이 제외 대상입니다.</span></code></pre></figure>

<p><strong>3. 문서 파일 제외</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">*</span><span class="p">.</span><span class="nf">xlsx</span>
<span class="o">*</span><span class="p">.</span><span class="nf">xls</span>
<span class="o">*</span><span class="p">.</span><span class="nf">pdf</span>
<span class="o">*</span><span class="p">.</span><span class="nf">docs</span>
<span class="o">*</span><span class="p">.</span><span class="nf">ppt</span>
<span class="o">*</span><span class="p">.</span><span class="nf">pptx</span>
<span class="c1">#=&gt; 문서형식은 올리지 않도록 설정합니다. 위에 형식이 자주 사용하는 파일 형식이죠?</span>
<span class="c1">#=&gt; 물론 필요에 따라서 문서를 올리기도 합니다 그때는 적절히 .gitignore파일을 수정해주면 되겠죠?</span></code></pre></figure>

<p><strong>4. 패키지 파일 제외</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">*</span><span class="p">.</span><span class="nf">dmg</span>
<span class="o">*</span><span class="p">.</span><span class="nf">iso</span>
<span class="o">*</span><span class="p">.</span><span class="nf">tar</span>
<span class="o">*</span><span class="p">.</span><span class="nf">zip</span>
<span class="o">*</span><span class="p">.</span><span class="nf">gz</span>
<span class="c1">#=&gt; 압축파일 형식입니다. </span></code></pre></figure>

<p><strong>5. OS용 시스템 파일 제외</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">.</span><span class="no">Trashes</span>
<span class="o">.</span><span class="no">Thumbs</span><span class="p">.</span><span class="nf">db</span>
<span class="p">.</span><span class="nf">ehthumbs</span><span class="p">.</span><span class="nf">db</span>
<span class="c1">#=&gt; 개발때 사용한 운영체제별 시스템 파일은 제외해야겠죠?</span></code></pre></figure>

<p><strong>6. 자신의 에디터[Eclipse, VSCode] 설정 파일 제외</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#=&gt; Eclipse</span>
<span class="p">.</span><span class="nf">metadata</span>
<span class="n">bin</span><span class="o">/</span>
<span class="n">tmp</span><span class="o">/</span>
<span class="o">*</span><span class="p">.</span><span class="nf">tmp</span>
<span class="o">*</span><span class="p">.</span><span class="nf">bak</span>
<span class="o">*</span><span class="p">.</span><span class="nf">swp</span>
<span class="n">local</span><span class="p">.</span><span class="nf">properties</span>
<span class="p">.</span><span class="nf">settings</span><span class="o">/</span>
<span class="p">.</span><span class="nf">loadpath</span>
<span class="p">.</span><span class="nf">recommenders</span>
<span class="p">.</span><span class="nf">project</span>
<span class="p">.</span><span class="nf">externalToolBuilders</span><span class="o">/</span>
<span class="o">*</span><span class="p">.</span><span class="nf">launch</span>
<span class="p">.</span><span class="nf">classpath</span>
<span class="p">.</span><span class="nf">factorypath</span>
<span class="p">.</span><span class="nf">buildpath</span>
<span class="p">.</span><span class="nf">target</span>
<span class="p">.</span><span class="nf">springBeans</span>
<span class="p">.</span><span class="nf">recommenders</span><span class="o">/</span>
<span class="o">-----------------------------------------------------------------------------</span>
<span class="c1">#=&gt; VSCode</span>
<span class="p">.</span><span class="nf">vscode</span><span class="o">/*</span>
<span class="o">!</span><span class="p">.</span><span class="nf">vscode</span><span class="o">/</span><span class="n">settings</span><span class="p">.</span><span class="nf">json</span>
<span class="o">!</span><span class="p">.</span><span class="nf">vscode</span><span class="o">/</span><span class="n">tasks</span><span class="p">.</span><span class="nf">json</span>
<span class="o">!</span><span class="p">.</span><span class="nf">vscode</span><span class="o">/</span><span class="n">launch</span><span class="p">.</span><span class="nf">json</span>
<span class="o">!</span><span class="p">.</span><span class="nf">vscode</span><span class="o">/</span><span class="n">extensions</span><span class="p">.</span><span class="nf">json</span>
<span class="c1">#=&gt; 이클립스를 사용하면 생성되는 설정 파일 혹은 임시 파일들은 제외합니다. </span>
<span class="c1">#=&gt; 해당 정보는 개발자마다 PC환경이 다르기 때문에 설정 정보를 넣어서 push하게 된다면</span>
<span class="c1">#=&gt; 해당 내용을 받는 개발자들에 이클립스 환경에 덮어쓰기가되어 동작하지않는 이슈가 생길 수 있습니다. </span>
<span class="c1">#=&gt; 이클립스 뿐만아니라 다른 에디터를 사용하면서 생기는 설정, 임시 파일을 제외해주세요~</span></code></pre></figure>

<p>해당 내용 이외에도 제외하고자하는 파일 형식이나 폴더를 등록해주시면 git 저장소에 쓸데없는 내용이 업로드 되지 않겠죠?ㅎㅎ</p>

<p>여기까지 <code class="highlighter-rouge">일반적으로 .gitignore에 등록하는 파일</code>에대해서 포스팅했습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>Oracle 설치 및 Spring에서 연동 [Oracle]</title>
	  <link>//spring-oracle-setup</link>
	  <author></author>
	  <pubDate>2018-12-10T09:00:00+09:00</pubDate>
	  <guid>//spring-oracle-setup</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 <strong>Oracle 설치 및 Spring에서 연동</strong>에 대해서 포스팅하겠습니다.</p>

<p><strong>순서</strong></p>
<blockquote>
  <ol>
    <li>Oracle database 설치</li>
    <li>Oracle database 생성</li>
    <li>JUnit 설치</li>
    <li>JUnit을 이용한 database 연결 테스트</li>
  </ol>
</blockquote>

<p><strong>1. Oracle database 설치</strong><br />
먼저 oracle database를 설치하도록 하겠습니다.<br />
<a href="https://login.oracle.com">oracle</a> 에 접속하셔서 로그인 하시면됩니다. 만약 계정이 없다면 회원가입 하셔야겠죠?<br />
회원가입을 하신 후 아래와 같은 화면과 같이 64비트를 클릭하시면 됩니다.</p>

<p><img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup1.png" /></p>

<p>계속해서 다음을 누르면서 설치를 진행합니다.</p>

<p><img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup2.png" /></p>

<p>그렇다면 쉽게 oracle database를 설치 하실 수 있습니다.</p>

<p><strong>2. Oracle database 생성</strong><br />
sql developer.exe를 실행합니다. 
그 후 아래 그림에서 초록색 <code class="highlighter-rouge">+</code>버튼을 클릭합니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup3.png" /></p>

<p>그렇다면 아래와 같은 창이 표시됩니다. 
<img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup4.png" /></p>

<p>접속이름, 사용자이름, 패스워드, sid(데이터베이스 이름)를 적절히 입력한 후 생성해 줍니다.</p>

<p>여기까지 하시면 데이터베이스 설치 부터 생성까지 완료가 되었습니다.</p>

<p><strong>3. JUnit 설치</strong><br />
이제 이클립스에서 JUnit 라이브러리를 이용하여 데이터베이스가 연결이 잘 되는지 확인해 보겠습니다. 
spring폴더 내에서 <code class="highlighter-rouge">pom.xml</code>을 열어서 아래와 같이 dependency를 추가해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;!--</span> <span class="no">Test</span> <span class="o">--&gt;</span>
        <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">junit</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
                &lt;artifactId&gt;junit&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">4.7</span><span class="o">&lt;</span><span class="sr">/version&gt;
                &lt;scope&gt;test&lt;/s</span><span class="n">cope</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/dependency&gt;</span></code></pre></figure>

<p>추가하고 저장한다면 자동으로 이클립스에서 해당 라이브러리를 다운받습니다. <br />
그러면 JUnit 테스트를 위한 라이브러리가 설치가 끝났습니다.</p>

<p><strong>4. JUnit을 이용한 database 연결 테스트</strong><br />
이제 테스트 코드를 작성해 보겠습니다. <br />
spring폴더내에 <code class="highlighter-rouge">src/test/java</code> 폴더에서 아래와 같이 OracleConnectionTest.java 파일을 생성해 줍니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit1.png" />
그리고 파일내에 해당 코드를 작성해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">Logger</span> <span class="no">Logger</span> <span class="o">=</span> <span class="no">LoggerFactory</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="no">OracleConnectionTest</span><span class="p">.</span><span class="nf">class</span><span class="p">);</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">DRIVER</span> <span class="o">=</span> <span class="s2">"oracle.jdbc.driver.OracleDriver"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">URL</span> <span class="o">=</span> <span class="s2">"jdbc:oracle:thin:@localhost:1521:orcl"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">USER</span> <span class="o">=</span> <span class="s2">"system"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">PW</span> <span class="o">=</span> <span class="s2">"1234"</span><span class="p">;</span>

<span class="vi">@Test</span> <span class="o">/</span><span class="sr">/JUnit이 테스트하는 코드
public void testConnection() throws Exception {
        Class.forName(DRIVER);
        try(Connection conn= DriverManager.getConnection(URL, USER, PW)) {
                Logger.info("오라클에 연결되었습니다.");
        }catch(Exception e) {
                e.printStackTrace();
        }
}
#=&gt; 이때 주의점은 URL에 자신의 데이터베이스 환경에 맞는 ip, port, 데이터베이스 이름 작성
#=&gt; USER, PW에 아까 데이터베이스 생성시에 작성했던 계정아이디 비밀번호를 각각 적어줍니다.</span></code></pre></figure>

<p>위와같이 작성해주고 저장해줍니다. <br />
이제 해당코드를 실행하여 테스트 해보겠습니다. <br />
OracleConnectionTest.java 파일을 오른쪽으로 클릭하고 <code class="highlighter-rouge">run as</code>를 보시면 JUnit test가 있을겁니다. 
이것을 클릭하여 실행해봅시다.</p>

<p>그렇다면 아래와같이 에러 없이 작동하는 것을 확인하시면됩니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit2.png" /></p>

<p>그리고 console창을 확인해보겠습니다.<br />
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit3.png" /></p>

<p>위와같이 에러없이 로그 값이 출력된다면 데이터베이스와 연결 테스트가 성공적으로 된 것입니다.</p>

<p>여기까지 <code class="highlighter-rouge">Oracle 설치 및 Spring에서 연동</code>에대해서 포스팅했습니다. <br />
지금까지는 데이터베이스 설치, 데이터베이스 설정, spring과 데이터베이스(oracle) 연결 테스트를 진행했습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>Eclipse에서 spring 환경 설정 [Spring]</title>
	  <link>//eclipse-spring-setup</link>
	  <author></author>
	  <pubDate>2018-12-08T09:00:00+09:00</pubDate>
	  <guid>//eclipse-spring-setup</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 <strong>Eclipse에서 Spring 초기 설정</strong>에 대해서 포스팅하겠습니다.</p>

<p><strong>순서</strong></p>
<blockquote>
  <ol>
    <li>spring plugin install</li>
    <li>spring mvc project 생성</li>
    <li>tomcat 설치 후 서버 실행</li>
    <li>프로젝트 실행</li>
    <li>한글 인코딩 문제 해결</li>
  </ol>
</blockquote>

<p><strong>1. spring plugin install</strong><br />
먼저 Eclipse에서 Spring plugin을 설치하도록 하겠습니다. <br />
Help -&gt; Market places -&gt; sts검색 -&gt; spring mvc plugin 설치
여기서는 spring plugin 3.x 버전으로 하겠습니다.</p>

<p><img src="/assets/images/2018-12-09-eclipse-spring-setup/spring1.png" />
위 이미지처럼 간단히 검색하여 spring plugin을 쉽게 설치 할 수 있습니다.</p>

<p><strong>2. spring mvc project 생성</strong><br />
다음으로는 Spring mvc project 생성하는 방법입니다. 
File -&gt; new -&gt; other -&gt; spring -&gt; spring legacy project를 통해 프로젝트를 생성해줍니다. 
<img src="/assets/images/2018-12-09-eclipse-spring-setup/spring2.png" />
프로젝트 생성이 완료되었습니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/springfolder.png" /></p>

<p><strong>3.tomcat 설치 후 서버 실행</strong><br />
이제는 구동 시킬 tomcat서버를 설치하도록 하겠습니다. <br />
File -&gt; new -&gt; other -&gt; server -&gt; server를 통해 server프로젝트를 생성하시면 됩니다. 
이떄 주의점은 맞는 tomcat 버전서버를 미리 받으셔야합니다.
<a href="http://tomcat.apache.org/">tomcat</a> 설치 주소입니다. 접속하셔서 알맞는 버전을 받으시면 됩니다.</p>

<p><img src="/assets/images/2018-12-09-eclipse-spring-setup/tomcat1.png" />
서버가 잘 생성이 된다면 아래와 같은 구조로 생성됩니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/tomcat2.png" /></p>

<p><strong>4. 프로젝트 실행</strong><br />
이제 tomcat서버를 실행 시키고 만들었던 spring 프로젝트를 실행해보도록 하겠습니다.</p>

<p>실행이 잘 된다면 아래와 같은 화면이 보여질것입니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/spring3.png" /></p>

<p>만약 404에러가 발생한다면 spring프로젝트를 실행시킬때 프로젝트 폴더내에서 파일을 실행시키지 않았는지 확인 하셔야합니다.<br />
spring 프로젝트를 실행시킬떄는 project최상위 폴더에서 프로젝트를 실행시켜야 404 에러없이 위와 같은 화면을 보실 수 있습니다.</p>

<p><strong>5. 한글 인코딩 문제 해결</strong> <br />
하지만 화면을 보시면 한글 인코딩 문제로 한글이 깨지는 것을 확인하실수 있습니다. <br />
이제 해당 문제를 해결해보겠습니다.<br />
<code class="highlighter-rouge">src -&gt; main -&gt; webapp -&gt; resources -&gt; WEB-INF -&gt; views -&gt; home.jsp</code>
spring 프로젝트내에서는 home.jsp가 디폴트로 생성되어있을것입니다. 물론 home.jsp가 스프링 실행 첫 화면입니다.
home.jsp에서 해당 코드를 삽입해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="sx">%@ page language="java" contentType="text/HTML;charset=UTF-8" pageEncoding="UTF-8" %&gt;
&lt;%
request.setCharacterEncoding("UTF-8");
%&gt;</span></code></pre></figure>

<p>다음으로
<code class="highlighter-rouge">src -&gt; main -&gt; webapp -&gt; resources -&gt; WEB-INF -&gt; web.xml</code>
web.xml파일에 해당 내용을 추가해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">	<span class="o">&lt;</span><span class="n">filter</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">filter</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">encodingFilter</span><span class="o">&lt;</span><span class="sr">/filter-name&gt;
                &lt;filter-class&gt;
                        org.springframework.web.filter.CharacterEncodingFilter
                &lt;/</span><span class="n">filter</span><span class="o">-</span><span class="k">class</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">init</span><span class="o">-</span><span class="n">param</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="n">param</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">encoding</span><span class="o">&lt;</span><span class="sr">/param-name&gt;
                        &lt;param-value&gt;UTF-8&lt;/</span><span class="n">param</span><span class="o">-</span><span class="n">value</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="sr">/init-param&gt;
	&lt;/</span><span class="n">filter</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">filter</span><span class="o">-</span><span class="n">mapping</span><span class="o">&gt;</span>
	        <span class="o">&lt;</span><span class="n">filter</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">encodingFilter</span><span class="o">&lt;</span><span class="sr">/filter-name&gt;
	        &lt;url-pattern&gt;/</span><span class="o">*&lt;</span><span class="sr">/url-pattern&gt;
	&lt;/</span><span class="n">filter</span><span class="o">-</span><span class="n">mapping</span><span class="o">&gt;</span></code></pre></figure>

<p>위에 두개의 설정 코드를 입력하신 후 프로젝트 재시작을 하시면 
아래와 같이 한글이 잘 나오는 것을 확인하실수 있습니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/spring4.png" /></p>

<p>여기까지 eclipse에서 spring 초기 환경 설정에대해서 포스팅했습니다. <br />
물론 sts 에디터라와 spring boot와 같이 초기에 쉬운 설정을 할 수 있는 방법들이 있지만 
기존에 방식대로 설정하는 방법이었습니다. ㅎㅎ</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>docker-compose apache tomcat, mysql 환경 구성 [docker]</title>
	  <link>//docker-tomcat-mysql</link>
	  <author></author>
	  <pubDate>2018-12-06T09:00:00+09:00</pubDate>
	  <guid>//docker-tomcat-mysql</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 docker에대해 포스팅하려고 합니다.<br />
docker에 대한 개념설명을 먼저하려고 했으나 제가 연습한 내용이 있어서 해당 내용을 간단히 먼저 포스팅하려고 합니다. ㅎㅎ</p>

<p>docker를 이용하여 어느 환경에서나 동일한 작업환경을 구성할 수 있는 장점이 있는데요
이때 사용하는 것이 dockerfile, docker-compose 입니다.</p>

<p>여기서 docker-compose는 여러개의 이미지 파일을 이용하여 여러개의 컨테이너를 실행시켜 동일한 작업 환경을 구축하는데에 사용하기위해 사용하는 파일입니다. ㅎㅎ</p>

<p>이번 포스팅에서는 apache tomcat, mysql 환경을 구축하는 docker-compose 파일을 작성하는 방법에대해 알아보도록 하겠습니다.</p>

<p><strong>해결 순서</strong></p>
<blockquote>
  <ol>
    <li>docker 설치</li>
    <li>docker-compose 파일 작성</li>
    <li>docker-compose 파일 실행</li>
  </ol>
</blockquote>

<p>간단하죠? ㅎㅎ
사실 설치와 실행은 더 간단합니다. 가장 중요한것은 docker-compose 파일을 작성하는 것입니다.</p>

<p>그럼 실습을 통해서 한번 진행해 보도록 하겠습니다.</p>

<p><strong>1. docker 설치</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
<span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span>
<span class="c1">#=&gt; 간단히 리눅스 환경에서 update와 upgrade를 해줍니다. ㅎㅎ</span>
<span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">curl</span> 
<span class="c1">#=&gt; docker를 apt-get으로 설치해도 되지만 curl를 이용해서 설치하기위해 curl를 설치 해줍니다.</span>
<span class="n">curl</span> <span class="o">-</span><span class="n">fsSL</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">get</span><span class="p">.</span><span class="nf">docker</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">sh</span>
<span class="c1">#=&gt; curl 명령어를 이용해 docker를 설치 해줍니다.</span></code></pre></figure>

<p>간단한 설치 과정으로 1번 과정이 끝이 났습니다.</p>

<p>아래 파일은 <a href="https://github.com/ghwlchlaks/docker-example-tomcat-mysql">docker-compose-apache-tomcat-mysql</a> 에서 보실 수 있습니다.</p>

<p><strong>2. docker-compose 파일 작성</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">version: </span><span class="s1">'2'</span>
<span class="ss">services:
        db:
                image: </span><span class="n">mysql</span><span class="ss">:latest</span>
                <span class="ss">environment:
                        </span><span class="no">MYSQL_ROOT_PASSWORD</span><span class="p">:</span> <span class="mi">1234</span>
                        <span class="no">MYSQL_DATABASE</span><span class="p">:</span> <span class="nb">test</span>
                        <span class="no">MYSQL_USER</span><span class="p">:</span> <span class="n">user</span>
                        <span class="no">MYSQL_PASSWORD</span><span class="p">:</span> <span class="mi">1234</span>
                <span class="ss">ports:
                        </span><span class="o">-</span> <span class="s2">"3306:3306"</span>
                <span class="ss">volumes:
                        </span><span class="o">-</span> <span class="s2">"./db:/docker-entrypoint-initdb.d"</span>
                <span class="ss">restart: </span><span class="n">always</span>

        <span class="ss">web:
                image: </span><span class="n">tomcat</span><span class="ss">:latest</span>
                <span class="ss">environment:
                        </span><span class="no">JDBC_URL</span><span class="p">:</span> <span class="n">jdbc</span><span class="ss">:mysql:/</span><span class="o">/</span><span class="n">db</span><span class="p">:</span><span class="mi">3306</span><span class="o">/</span><span class="nb">test</span><span class="p">?</span><span class="n">connectTimeout</span><span class="o">=</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">socketTimeout</span><span class="o">=</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">autoReconnect</span><span class="o">=</span><span class="kp">true</span>
                        <span class="no">JDBC_USER</span><span class="p">:</span> <span class="n">user</span>
                        <span class="no">JDBC_PASS</span><span class="p">:</span> <span class="mi">1234</span>
                <span class="ss">ports:
                        </span><span class="o">-</span> <span class="s2">"80:8080"</span>
                <span class="ss">volumes:
                        </span><span class="o">-</span> <span class="p">.</span><span class="nf">/</span><span class="n">tomcat</span><span class="o">/</span><span class="n">webapps</span><span class="ss">:/</span><span class="n">user</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">tomcat</span><span class="o">/</span><span class="n">webapps</span>
                <span class="ss">links:
                        </span><span class="o">-</span> <span class="n">db</span>
                <span class="ss">restart: </span><span class="n">always</span>  

<span class="c1">#=&gt; 1번째: db라는 이름으로 컨테이너를 생성합니다.</span>
<span class="c1">#=&gt; 2번째: 최신 버전의 mysql이미지를 다운받습니다.</span>
<span class="c1">#=&gt; 3~7번째: db컨테이너에대해 환경설정을 하는 부분입니다.</span>
<span class="c1">#=&gt; 8~9번째: host포트와 docker container포트를 연결할 port번호입니다.</span>
<span class="c1">#=&gt; 10~11번째: 컨테이너안에서 사용하는 데이터를 host에 저장할 위치입니다. </span>
<span class="c1">#=&gt; 이외에 web도 비슷한 흐름이므로 설명을 생략하겠습니다.</span>
<span class="c1">#=&gt; 추가적으로 web에서 links는 연결할 컨테이너 이름입니다. 컨테이너를 연결하여 web에 enviroment등과 같이 설정을 연결할 수 있습니다.</span></code></pre></figure>

<p>이외에도 여러가지 옵션이 있고 복잡한 환경설정을 할 수 있지만 기본적으로 환경설정을 할 수 있는 설정파일작성이 끝이 났습니다. <br />
해당 내용을 <code class="highlighter-rouge">docker-compose.yml</code>로 저장하고 터미널환경으로 나와 줍니다~ㅎㅎ</p>

<p><strong>3. docker-compose 파일 실행</strong><br />
이제 해당 내용이 잘 작성되었는지 실행해보도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">docker</span><span class="o">-</span><span class="n">compose</span> <span class="n">up</span>
<span class="c1">#=&gt; 해당 커맨드를 입력하면 docker-compose.yml파일이 실행이 됩니다. </span>
<span class="c1">#=&gt; 백그라운드로 파일을 시작하고 싶다면 `-d` 옵션을 추가적으로 입력해줍니다.</span></code></pre></figure>

<p>실행이 완료되면 docker ps 명령어를 이용하여 db와 web컨테이너가 잘 실행되었는지 확인합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">docker</span> <span class="n">ps</span></code></pre></figure>

<p><img src="/assets/images/2018-12-07-docker-tomcat-mysql/docker_ps.png" /></p>

<p>위에 사진처럼 두개의 컨테이너가 실행이 된것을 확인하시면 됩니다</p>

<p>여기서는 tomcat과 mysql두개의 컨테이너를 생성하는 커맨드를 docker-compose파일로 작성하였지만 
추가적으로 자신이 개발할 환경에 맞는 커맨드를 이용하여 docker-compose파일을 만든다면 어디서나 똑같은 개발환경을 구축하는데에 편해질것입니다.</p>

<p>또한 위에 적힌 커맨드 옵션 이외에도 많은 옵션들이 있으니 공부하시면서 테스트 해보시면 좋을 것같습니다.</p>

<p>지금까지 docker-compse를 이용하여 tomcat, mysql 컨테이너 환경 구축하는 방법에대해 포스팅했습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>Jekyll custom plugin (로컬은되는데 원격은 안될때) [Jekyll]</title>
	  <link>//Jekyll-custom-plugin</link>
	  <author></author>
	  <pubDate>2018-12-01T09:00:00+09:00</pubDate>
	  <guid>//Jekyll-custom-plugin</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.<br />
오래만에 포스팅합니다.ㅠㅠ 요즘 다른일에 집중하느라.. (핑계..)</p>

<p>이번에는 제가 Jekyll theme에 기능들을 수정하다가 생긴 이슈에 대해서 생긴 이슈를 해결하는 방법에대해서 설명드리도록 하겠습니다.</p>

<p>jekyll plugin에서 custom plugin을 보실수 있습니다. 그런데 여러가지 기능을 추가하다보면 local상에서는 정상 작동되는데 github에 업로드하여 사이트에 접속했을때는 404 에러 혹은 문제가 발생할 수 있습니다. (경로문제가 아닐때 ㅎㅎ)</p>

<p>해당 이슈를 해결하는 방법에대해서 포스팅 하겠습니다.</p>

<p>해당 이슈가 생기는 이유는 github에서 보안 문제로 custom plugin이 적용이되지 않는다고 하네요 ㅎㅎ</p>

<p><strong>해결 순서</strong></p>
<blockquote>
  <ol>
    <li>local repository상에서 master브랜치에서 분기한 다른 브랜치를 생성  (여기서는 source 브랜치 생성)</li>
    <li>local repository와 remote repository에서 master브랜치 삭제</li>
    <li>source브랜치에서 .gitignore파일 _site폴더 주석 혹은 삭제 처리</li>
    <li>source브랜치에서 .nojekyll 파일 생성 및 _config.yml 파일 수정</li>
    <li>source브랜치에서 _site폴더만 필터링 해서 master브랜치 생성</li>
    <li>master브랜치와 source브랜치 전체 push 하기</li>
    <li>웹사이트 정상 작동 확인</li>
    <li>해당 순서를 shell script를 만들어서 간편화 하기</li>
  </ol>
</blockquote>

<p>해당 순서만 보고 따라해도 되겠지만 왜 저렇게 하는지 가볍게 알고 넘어가는게 좋겠죠?
우선 github 블로그는 master브랜치만 적용이되어 블로그가 생성 및 갱신됩니다. <br />
그래서 master브랜치에 아예 local에서 정상 작동되는 _site폴더를 master브랜치에 push하여 해결하는 방식입니다. <br />
여기서 _site폴더는 local에서 jekyll build를 할때 갱신되는 것은 알고 계실것이라고 생각합니다. <br />
그리고 source브랜치는 _post및 전체 블로그의 소스를 관리하는 브랜치입니다.<br />
여기서 갱신및 추가한 소스를 jekyll build하여 _site폴더가 갱신되면
해당 _site를 필터링하여 master브랜치에 업로드하는 방식입니다.</p>

<p>그럼 해결 순서대로 시작해보겠습니다.</p>

<p><strong>1. local repository상에서 master브랜치에서 분기한 다른 브랜치를 생성(여기서는 source 브랜치 생성)</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">source</span>
<span class="o">=&gt;</span> <span class="n">source</span> <span class="err">브랜치를</span> <span class="err">생성하고</span> <span class="err">해당</span> <span class="err">브랜치로</span> <span class="err">이동</span></code></pre></figure>

<p><strong>2. local repository와 remote repository에서 master브랜치 삭제</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="ss">:master</span>
<span class="o">=&gt;</span> <span class="n">remote</span> <span class="n">repository</span><span class="err">에</span> <span class="n">master</span><span class="err">브랜치</span> <span class="err">삭제</span>
<span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="no">D</span> <span class="n">master</span>
<span class="o">=&gt;</span> <span class="n">local</span> <span class="n">repository</span><span class="err">에서</span> <span class="n">master</span><span class="err">브랜치</span> <span class="err">삭제</span></code></pre></figure>

<p><strong>3. source브랜치에서 .gitignore파일 _site폴더 주석 혹은 삭제 처리</strong><br />
기본적으로 _site폴더는 .gitignore에서 업로드 못하게 되어있습니다. 
이 주석을 제거해줍시다!</p>

<p><strong>4. source브랜치에서 .nojekyll 파일 생성 및 _config.yml 파일 수정</strong><br />
.nojekyll 파일을 생성
_config.yml파일 수정</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">include:  
  </span><span class="p">\</span><span class="o">-</span> <span class="p">.</span><span class="nf">nojekyll</span>
<span class="o">=&gt;</span> <span class="err">해당</span> <span class="err">코드를</span> <span class="err">추가해</span> <span class="err">줍니다</span><span class="o">!</span></code></pre></figure>

<p><strong>5. source브랜치에서 _site폴더만 필터링 해서 master브랜치 생성</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">filter</span><span class="o">-</span><span class="n">branch</span> <span class="o">--</span><span class="n">subdirectory</span><span class="o">-</span><span class="n">filter</span> <span class="n">_site</span> <span class="o">-</span><span class="n">f</span> <span class="no">HEAD</span>
<span class="o">=&gt;</span> <span class="err">현재</span> <span class="no">HEAD</span><span class="err">에서</span> <span class="n">_site</span> <span class="err">폴더를</span> <span class="err">필터링하는</span> <span class="err">명령어</span> <span class="err">입니다</span><span class="p">.</span> <span class="nf">git</span><span class="err">에서</span> <span class="err">제공하고요</span><span class="o">~</span></code></pre></figure>

<p><strong>6. master브랜치와 source브랜치 전체 push 하기</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">all</span> 
<span class="o">=&gt;</span> <span class="err">전체</span> <span class="n">branch</span><span class="err">를</span> <span class="n">push</span> <span class="err">하는</span> <span class="err">명령어입니다</span><span class="o">.</span></code></pre></figure>

<p><strong>7. 웹사이트 정상 작동 확인</strong><br />
업로드 후 자신의 사이트에서 정상 작동하는지 확인하시면 됩니다.
기본적으로 github 브랜치 구조는 다음과 같습니다.</p>

<p>master branch (source 브랜치에서 build된 _site폴더내부)<br />
<img src="/assets/images/2018-12-01-Jekyll-custom-plugin/master.PNG" /></p>

<p>source branch (소스를 관리하는 전체 소스)<br />
<img src="/assets/images/2018-12-01-Jekyll-custom-plugin/source.PNG" /></p>

<p><strong>8. 해당 순서를 shell script를 만들어서 간편화 하기</strong><br />
매번 위와 같이 반복작업을 하다보면 매우 귀찮겠죠? 이것을 한번에 처리하기 위해 
shell script를 만들어 보겠습니다 파일명.sh을 만든 후 해당 코드를 입력합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#!/bin/bash</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="n">source</span>
<span class="o">=&gt;</span> <span class="n">source</span> <span class="err">브랜치로</span> <span class="err">이동</span> 
<span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="no">D</span> <span class="n">master</span>
<span class="o">=&gt;</span> <span class="err">병합되지</span> <span class="err">않은</span> <span class="n">master</span> <span class="err">브랜치</span> <span class="err">삭제</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">master</span>
<span class="o">=&gt;</span> <span class="n">master</span><span class="err">브랜치</span> <span class="err">생성</span> <span class="p">(</span><span class="err">당연히</span> <span class="n">souce</span><span class="err">브랜치에서</span> <span class="n">build</span><span class="err">후</span> <span class="n">git</span> <span class="n">add</span><span class="p">,</span> <span class="n">git</span> <span class="n">commit</span><span class="err">을</span> <span class="err">한</span> <span class="err">이후여야겠죠</span><span class="p">?)</span>
<span class="n">git</span> <span class="n">filter</span><span class="o">-</span><span class="n">branch</span> <span class="o">--</span><span class="n">subdirectory</span><span class="o">-</span><span class="n">filter</span> <span class="n">_site</span> <span class="o">-</span><span class="n">f</span> <span class="no">HEAD</span>
<span class="o">=&gt;</span> <span class="err">브랜치</span> <span class="err">필터링을</span> <span class="err">통해</span> <span class="n">_site</span> <span class="err">추출</span>
<span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">all</span>
<span class="o">=&gt;</span> <span class="n">master</span><span class="p">,</span> <span class="n">source</span> <span class="err">브랜치</span> <span class="err">모두</span> <span class="n">github</span><span class="err">에</span> <span class="n">push</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="n">source</span>
<span class="o">=&gt;</span> <span class="err">다시</span> <span class="err">소스를</span> <span class="err">관리하는</span> <span class="n">source</span> <span class="err">브랜치로</span> <span class="err">이동</span></code></pre></figure>

<p>이렇게 shell script를 만든 후 윈도우는 환경변수 설정을 해주시면 되는데요 <br />
저는 에디터에서 파일경로 복사하고 에디터 터미널에 붙여넣기 하는 방식으로 합니다. <br />
편하신 방법으로 하시면 되겠습니다.</p>

<p>물론 당연한거지만 <code class="highlighter-rouge">주의하실점</code>은 source브랜치에서 bundle exec jekyll build or bundle exec jekyll serve 명령어로 build하신 후 (local에서 확인 하실 꺼니깐 당연히 하실꺼라 생각합니다.) git add, git commit을 하셔야합니다. <br />
그래야 _site폴더가 갱신된 상태에서 local repository에 적용이 되니깐요 ㅎㅎ<br />
그 후 쉘스크립트 또는 위에 순서대로 진행하시면 됩니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL2] 주식가격 프로그래머스 [파이썬]</title>
	  <link>//Algorithm-stockprice</link>
	  <author></author>
	  <pubDate>2018-10-21T21:00:00+09:00</pubDate>
	  <guid>//Algorithm-stockprice</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은 스택(stack)/큐(queue)와 관련된 <strong>프로그래머스 문제 LEVEL2에 해당되는 주식가격 알고리즘 문제</strong>를 풀어보도록 하겠습니다.</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/42584">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 유지된 기간은 몇 초인지를 계산하는 문제입니다.</p>

<p><strong>제한 사항</strong></p>
<blockquote>
  <ul>
    <li>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.</li>
    <li>prices의 길이는 2 이상 100,000 이하입니다.</li>
  </ul>
</blockquote>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  
<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">prices</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span><span class="n">prices</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="k">break</span>
            <span class="ss">else:
                </span><span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">answer</span></code></pre></figure>

<p>해당 문제는 스택/큐 부분이지만 이중 for문을 이용해서 풀었습니다.<br />
다른 분들이 푸신내용보니깐 큐를 이용해서 (pop(0)) 푸시는 분들도 많았습니다.<br />
사실 저도 큐를 이용하여 접근하였지만 시간초과가 발생해서 간단히 이중for문을 이용했습니다.<br />
시간의 큰차이는 없어보였는데 시간 제한사항이 역시나 민감하네요 
ㅎㅎ 처음에 시간초과가 발생해서 살짝 당황했습니다. ㅎㅎ</p>

<h1 id="풀이방법">풀이방법</h1>
<p>처음 i 변수를 가지는 for문은 비교할 기준의 요소를 정하는 인덱스입니다.<br />
안에 j 변수를 가지는 for문은 인덱스 i부터 끝까지 비교할 대상의 인덱스를 나타냅니다.<br />
안에 <code class="highlighter-rouge">if prices[i] &gt; prices[j]</code>는 기준에 비해 가격이 유지되지 않고 떨어지는 인덱스를 가졌을때 해당 for문을 벗어나는 코드입니다.<br />
<code class="highlighter-rouge">else</code>부분은 이외에는 count를 1씩 증가시켜줍니다.</p>

<p>지금까지 <strong>주식가격 프로그래머스 스택/큐 [파이썬]</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>


</channel>
</rss>
