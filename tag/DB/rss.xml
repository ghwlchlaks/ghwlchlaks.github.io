<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ghwlchlaks.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>같이 배워가는 IT 블로그입니다~. Python, JavaScript, nodejs, Github, algorithm, etc</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Oracle 설치 및 Spring에서 연동 [Oracle]</title>
	  <link>//spring-oracle-setup</link>
	  <author></author>
	  <pubDate>2018-12-10T09:00:00+09:00</pubDate>
	  <guid>//spring-oracle-setup</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 <strong>Oracle 설치 및 Spring에서 연동</strong>에 대해서 포스팅하겠습니다.</p>

<p><strong>순서</strong></p>
<blockquote>
  <ol>
    <li>Oracle database 설치</li>
    <li>Oracle database 생성</li>
    <li>JUnit 설치</li>
    <li>JUnit을 이용한 database 연결 테스트</li>
  </ol>
</blockquote>

<p><strong>1. Oracle database 설치</strong><br />
먼저 oracle database를 설치하도록 하겠습니다.<br />
<a href="https://login.oracle.com">oracle</a> 에 접속하셔서 로그인 하시면됩니다. 만약 계정이 없다면 회원가입 하셔야겠죠?<br />
회원가입을 하신 후 아래와 같은 화면과 같이 64비트를 클릭하시면 됩니다.</p>

<p><img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup1.png" /></p>

<p>계속해서 다음을 누르면서 설치를 진행합니다.</p>

<p><img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup2.png" /></p>

<p>그렇다면 쉽게 oracle database를 설치 하실 수 있습니다.</p>

<p><strong>2. Oracle database 생성</strong><br />
sql developer.exe를 실행합니다. 
그 후 아래 그림에서 초록색 <code class="highlighter-rouge">+</code>버튼을 클릭합니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup3.png" /></p>

<p>그렇다면 아래와 같은 창이 표시됩니다. 
<img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup4.png" /></p>

<p>접속이름, 사용자이름, 패스워드, sid(데이터베이스 이름)를 적절히 입력한 후 생성해 줍니다.</p>

<p>여기까지 하시면 데이터베이스 설치 부터 생성까지 완료가 되었습니다.</p>

<p><strong>3. JUnit 설치</strong><br />
이제 이클립스에서 JUnit 라이브러리를 이용하여 데이터베이스가 연결이 잘 되는지 확인해 보겠습니다. 
spring폴더 내에서 <code class="highlighter-rouge">pom.xml</code>을 열어서 아래와 같이 dependency를 추가해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;!--</span> <span class="no">Test</span> <span class="o">--&gt;</span>
        <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">junit</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
                &lt;artifactId&gt;junit&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">4.7</span><span class="o">&lt;</span><span class="sr">/version&gt;
                &lt;scope&gt;test&lt;/s</span><span class="n">cope</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/dependency&gt;</span></code></pre></figure>

<p>추가하고 저장한다면 자동으로 이클립스에서 해당 라이브러리를 다운받습니다. <br />
그러면 JUnit 테스트를 위한 라이브러리가 설치가 끝났습니다.</p>

<p><strong>4. JUnit을 이용한 database 연결 테스트</strong><br />
이제 테스트 코드를 작성해 보겠습니다. <br />
spring폴더내에 <code class="highlighter-rouge">src/test/java</code> 폴더에서 아래와 같이 OracleConnectionTest.java 파일을 생성해 줍니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit1.png" />
그리고 파일내에 해당 코드를 작성해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">Logger</span> <span class="no">Logger</span> <span class="o">=</span> <span class="no">LoggerFactory</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="no">OracleConnectionTest</span><span class="p">.</span><span class="nf">class</span><span class="p">);</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">DRIVER</span> <span class="o">=</span> <span class="s2">"oracle.jdbc.driver.OracleDriver"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">URL</span> <span class="o">=</span> <span class="s2">"jdbc:oracle:thin:@localhost:1521:orcl"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">USER</span> <span class="o">=</span> <span class="s2">"system"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">PW</span> <span class="o">=</span> <span class="s2">"1234"</span><span class="p">;</span>

<span class="vi">@Test</span> <span class="o">/</span><span class="sr">/JUnit이 테스트하는 코드
public void testConnection() throws Exception {
        Class.forName(DRIVER);
        try(Connection conn= DriverManager.getConnection(URL, USER, PW)) {
                Logger.info("오라클에 연결되었습니다.");
        }catch(Exception e) {
                e.printStackTrace();
        }
}
#=&gt; 이때 주의점은 URL에 자신의 데이터베이스 환경에 맞는 ip, port, 데이터베이스 이름 작성
#=&gt; USER, PW에 아까 데이터베이스 생성시에 작성했던 계정아이디 비밀번호를 각각 적어줍니다.</span></code></pre></figure>

<p>위와같이 작성해주고 저장해줍니다. <br />
이제 해당코드를 실행하여 테스트 해보겠습니다. <br />
OracleConnectionTest.java 파일을 오른쪽으로 클릭하고 <code class="highlighter-rouge">run as</code>를 보시면 JUnit test가 있을겁니다. 
이것을 클릭하여 실행해봅시다.</p>

<p>그렇다면 아래와같이 에러 없이 작동하는 것을 확인하시면됩니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit2.png" /></p>

<p>그리고 console창을 확인해보겠습니다.<br />
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit3.png" /></p>

<p>위와같이 에러없이 로그 값이 출력된다면 데이터베이스와 연결 테스트가 성공적으로 된 것입니다.</p>

<p>여기까지 <code class="highlighter-rouge">Oracle 설치 및 Spring에서 연동</code>에대해서 포스팅했습니다. <br />
지금까지는 데이터베이스 설치, 데이터베이스 설정, spring과 데이터베이스(oracle) 연결 테스트를 진행했습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>docker-compose apache tomcat, mysql 환경 구성 [docker]</title>
	  <link>//docker-tomcat-mysql</link>
	  <author></author>
	  <pubDate>2018-12-06T09:00:00+09:00</pubDate>
	  <guid>//docker-tomcat-mysql</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 docker에대해 포스팅하려고 합니다.<br />
docker에 대한 개념설명을 먼저하려고 했으나 제가 연습한 내용이 있어서 해당 내용을 간단히 먼저 포스팅하려고 합니다. ㅎㅎ</p>

<p>docker를 이용하여 어느 환경에서나 동일한 작업환경을 구성할 수 있는 장점이 있는데요
이때 사용하는 것이 dockerfile, docker-compose 입니다.</p>

<p>여기서 docker-compose는 여러개의 이미지 파일을 이용하여 여러개의 컨테이너를 실행시켜 동일한 작업 환경을 구축하는데에 사용하기위해 사용하는 파일입니다. ㅎㅎ</p>

<p>이번 포스팅에서는 apache tomcat, mysql 환경을 구축하는 docker-compose 파일을 작성하는 방법에대해 알아보도록 하겠습니다.</p>

<p><strong>해결 순서</strong></p>
<blockquote>
  <ol>
    <li>docker 설치</li>
    <li>docker-compose 파일 작성</li>
    <li>docker-compose 파일 실행</li>
  </ol>
</blockquote>

<p>간단하죠? ㅎㅎ
사실 설치와 실행은 더 간단합니다. 가장 중요한것은 docker-compose 파일을 작성하는 것입니다.</p>

<p>그럼 실습을 통해서 한번 진행해 보도록 하겠습니다.</p>

<p><strong>1. docker 설치</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
<span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span>
<span class="c1">#=&gt; 간단히 리눅스 환경에서 update와 upgrade를 해줍니다. ㅎㅎ</span>
<span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">curl</span> 
<span class="c1">#=&gt; docker를 apt-get으로 설치해도 되지만 curl를 이용해서 설치하기위해 curl를 설치 해줍니다.</span>
<span class="n">curl</span> <span class="o">-</span><span class="n">fsSL</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">get</span><span class="p">.</span><span class="nf">docker</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">sh</span>
<span class="c1">#=&gt; curl 명령어를 이용해 docker를 설치 해줍니다.</span></code></pre></figure>

<p>간단한 설치 과정으로 1번 과정이 끝이 났습니다.</p>

<p>아래 파일은 <a href="https://github.com/ghwlchlaks/docker-example-tomcat-mysql">docker-compose-apache-tomcat-mysql</a> 에서 보실 수 있습니다.</p>

<p><strong>2. docker-compose 파일 작성</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">version: </span><span class="s1">'2'</span>
<span class="ss">services:
        db:
                image: </span><span class="n">mysql</span><span class="ss">:latest</span>
                <span class="ss">environment:
                        </span><span class="no">MYSQL_ROOT_PASSWORD</span><span class="p">:</span> <span class="mi">1234</span>
                        <span class="no">MYSQL_DATABASE</span><span class="p">:</span> <span class="nb">test</span>
                        <span class="no">MYSQL_USER</span><span class="p">:</span> <span class="n">user</span>
                        <span class="no">MYSQL_PASSWORD</span><span class="p">:</span> <span class="mi">1234</span>
                <span class="ss">ports:
                        </span><span class="o">-</span> <span class="s2">"3306:3306"</span>
                <span class="ss">volumes:
                        </span><span class="o">-</span> <span class="s2">"./db:/docker-entrypoint-initdb.d"</span>
                <span class="ss">restart: </span><span class="n">always</span>

        <span class="ss">web:
                image: </span><span class="n">tomcat</span><span class="ss">:latest</span>
                <span class="ss">environment:
                        </span><span class="no">JDBC_URL</span><span class="p">:</span> <span class="n">jdbc</span><span class="ss">:mysql:/</span><span class="o">/</span><span class="n">db</span><span class="p">:</span><span class="mi">3306</span><span class="o">/</span><span class="nb">test</span><span class="p">?</span><span class="n">connectTimeout</span><span class="o">=</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">socketTimeout</span><span class="o">=</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">autoReconnect</span><span class="o">=</span><span class="kp">true</span>
                        <span class="no">JDBC_USER</span><span class="p">:</span> <span class="n">user</span>
                        <span class="no">JDBC_PASS</span><span class="p">:</span> <span class="mi">1234</span>
                <span class="ss">ports:
                        </span><span class="o">-</span> <span class="s2">"80:8080"</span>
                <span class="ss">volumes:
                        </span><span class="o">-</span> <span class="p">.</span><span class="nf">/</span><span class="n">tomcat</span><span class="o">/</span><span class="n">webapps</span><span class="ss">:/</span><span class="n">user</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">tomcat</span><span class="o">/</span><span class="n">webapps</span>
                <span class="ss">links:
                        </span><span class="o">-</span> <span class="n">db</span>
                <span class="ss">restart: </span><span class="n">always</span>  

<span class="c1">#=&gt; 1번째: db라는 이름으로 컨테이너를 생성합니다.</span>
<span class="c1">#=&gt; 2번째: 최신 버전의 mysql이미지를 다운받습니다.</span>
<span class="c1">#=&gt; 3~7번째: db컨테이너에대해 환경설정을 하는 부분입니다.</span>
<span class="c1">#=&gt; 8~9번째: host포트와 docker container포트를 연결할 port번호입니다.</span>
<span class="c1">#=&gt; 10~11번째: 컨테이너안에서 사용하는 데이터를 host에 저장할 위치입니다. </span>
<span class="c1">#=&gt; 이외에 web도 비슷한 흐름이므로 설명을 생략하겠습니다.</span>
<span class="c1">#=&gt; 추가적으로 web에서 links는 연결할 컨테이너 이름입니다. 컨테이너를 연결하여 web에 enviroment등과 같이 설정을 연결할 수 있습니다.</span></code></pre></figure>

<p>이외에도 여러가지 옵션이 있고 복잡한 환경설정을 할 수 있지만 기본적으로 환경설정을 할 수 있는 설정파일작성이 끝이 났습니다. <br />
해당 내용을 <code class="highlighter-rouge">docker-compose.yml</code>로 저장하고 터미널환경으로 나와 줍니다~ㅎㅎ</p>

<p><strong>3. docker-compose 파일 실행</strong><br />
이제 해당 내용이 잘 작성되었는지 실행해보도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">docker</span><span class="o">-</span><span class="n">compose</span> <span class="n">up</span>
<span class="c1">#=&gt; 해당 커맨드를 입력하면 docker-compose.yml파일이 실행이 됩니다. </span>
<span class="c1">#=&gt; 백그라운드로 파일을 시작하고 싶다면 `-d` 옵션을 추가적으로 입력해줍니다.</span></code></pre></figure>

<p>실행이 완료되면 docker ps 명령어를 이용하여 db와 web컨테이너가 잘 실행되었는지 확인합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">docker</span> <span class="n">ps</span></code></pre></figure>

<p><img src="/assets/images/2018-12-07-docker-tomcat-mysql/docker_ps.png" /></p>

<p>위에 사진처럼 두개의 컨테이너가 실행이 된것을 확인하시면 됩니다</p>

<p>여기서는 tomcat과 mysql두개의 컨테이너를 생성하는 커맨드를 docker-compose파일로 작성하였지만 
추가적으로 자신이 개발할 환경에 맞는 커맨드를 이용하여 docker-compose파일을 만든다면 어디서나 똑같은 개발환경을 구축하는데에 편해질것입니다.</p>

<p>또한 위에 적힌 커맨드 옵션 이외에도 많은 옵션들이 있으니 공부하시면서 테스트 해보시면 좋을 것같습니다.</p>

<p>지금까지 docker-compse를 이용하여 tomcat, mysql 컨테이너 환경 구축하는 방법에대해 포스팅했습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>


</channel>
</rss>
