<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ghwlchlaks.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>같이 배워가는 IT 블로그입니다~. Python, JavaScript, nodejs, Github, algorithm, etc</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Oracle 설치 및 Spring에서 연동 [Oracle]</title>
	  <link>//spring-oracle-setup</link>
	  <author></author>
	  <pubDate>2018-12-10T09:00:00+09:00</pubDate>
	  <guid>//spring-oracle-setup</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 <strong>Oracle 설치 및 Spring에서 연동</strong>에 대해서 포스팅하겠습니다.</p>

<p><strong>순서</strong></p>
<blockquote>
  <ol>
    <li>Oracle database 설치</li>
    <li>Oracle database 생성</li>
    <li>JUnit 설치</li>
    <li>JUnit을 이용한 database 연결 테스트</li>
  </ol>
</blockquote>

<p><strong>1. Oracle database 설치</strong><br />
먼저 oracle database를 설치하도록 하겠습니다.<br />
<a href="https://login.oracle.com">oracle</a> 에 접속하셔서 로그인 하시면됩니다. 만약 계정이 없다면 회원가입 하셔야겠죠?<br />
회원가입을 하신 후 아래와 같은 화면과 같이 64비트를 클릭하시면 됩니다.</p>

<p><img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup1.png" /></p>

<p>계속해서 다음을 누르면서 설치를 진행합니다.</p>

<p><img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup2.png" /></p>

<p>그렇다면 쉽게 oracle database를 설치 하실 수 있습니다.</p>

<p><strong>2. Oracle database 생성</strong><br />
sql developer.exe를 실행합니다. 
그 후 아래 그림에서 초록색 <code class="highlighter-rouge">+</code>버튼을 클릭합니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup3.png" /></p>

<p>그렇다면 아래와 같은 창이 표시됩니다. 
<img src="/assets/images/2018-12-10-spring-oracle-setup/oracle-setup4.png" /></p>

<p>접속이름, 사용자이름, 패스워드, sid(데이터베이스 이름)를 적절히 입력한 후 생성해 줍니다.</p>

<p>여기까지 하시면 데이터베이스 설치 부터 생성까지 완료가 되었습니다.</p>

<p><strong>3. JUnit 설치</strong><br />
이제 이클립스에서 JUnit 라이브러리를 이용하여 데이터베이스가 연결이 잘 되는지 확인해 보겠습니다. 
spring폴더 내에서 <code class="highlighter-rouge">pom.xml</code>을 열어서 아래와 같이 dependency를 추가해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;!--</span> <span class="no">Test</span> <span class="o">--&gt;</span>
        <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">junit</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
                &lt;artifactId&gt;junit&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">4.7</span><span class="o">&lt;</span><span class="sr">/version&gt;
                &lt;scope&gt;test&lt;/s</span><span class="n">cope</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/dependency&gt;</span></code></pre></figure>

<p>추가하고 저장한다면 자동으로 이클립스에서 해당 라이브러리를 다운받습니다. <br />
그러면 JUnit 테스트를 위한 라이브러리가 설치가 끝났습니다.</p>

<p><strong>4. JUnit을 이용한 database 연결 테스트</strong><br />
이제 테스트 코드를 작성해 보겠습니다. <br />
spring폴더내에 <code class="highlighter-rouge">src/test/java</code> 폴더에서 아래와 같이 OracleConnectionTest.java 파일을 생성해 줍니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit1.png" />
그리고 파일내에 해당 코드를 작성해 줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">Logger</span> <span class="no">Logger</span> <span class="o">=</span> <span class="no">LoggerFactory</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="no">OracleConnectionTest</span><span class="p">.</span><span class="nf">class</span><span class="p">);</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">DRIVER</span> <span class="o">=</span> <span class="s2">"oracle.jdbc.driver.OracleDriver"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">URL</span> <span class="o">=</span> <span class="s2">"jdbc:oracle:thin:@localhost:1521:orcl"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">USER</span> <span class="o">=</span> <span class="s2">"system"</span><span class="p">;</span>
<span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="no">String</span> <span class="no">PW</span> <span class="o">=</span> <span class="s2">"1234"</span><span class="p">;</span>

<span class="vi">@Test</span> <span class="o">/</span><span class="sr">/JUnit이 테스트하는 코드
public void testConnection() throws Exception {
        Class.forName(DRIVER);
        try(Connection conn= DriverManager.getConnection(URL, USER, PW)) {
                Logger.info("오라클에 연결되었습니다.");
        }catch(Exception e) {
                e.printStackTrace();
        }
}
#=&gt; 이때 주의점은 URL에 자신의 데이터베이스 환경에 맞는 ip, port, 데이터베이스 이름 작성
#=&gt; USER, PW에 아까 데이터베이스 생성시에 작성했던 계정아이디 비밀번호를 각각 적어줍니다.</span></code></pre></figure>

<p>위와같이 작성해주고 저장해줍니다. <br />
이제 해당코드를 실행하여 테스트 해보겠습니다. <br />
OracleConnectionTest.java 파일을 오른쪽으로 클릭하고 <code class="highlighter-rouge">run as</code>를 보시면 JUnit test가 있을겁니다. 
이것을 클릭하여 실행해봅시다.</p>

<p>그렇다면 아래와같이 에러 없이 작동하는 것을 확인하시면됩니다.
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit2.png" /></p>

<p>그리고 console창을 확인해보겠습니다.<br />
<img src="/assets/images/2018-12-10-spring-oracle-setup/junit3.png" /></p>

<p>위와같이 에러없이 로그 값이 출력된다면 데이터베이스와 연결 테스트가 성공적으로 된 것입니다.</p>

<p>여기까지 <code class="highlighter-rouge">Oracle 설치 및 Spring에서 연동</code>에대해서 포스팅했습니다. <br />
지금까지는 데이터베이스 설치, 데이터베이스 설정, spring과 데이터베이스(oracle) 연결 테스트를 진행했습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>Eclipse에서 spring 환경 설정 [Spring]</title>
	  <link>//eclipse-spring-setup</link>
	  <author></author>
	  <pubDate>2018-12-08T09:00:00+09:00</pubDate>
	  <guid>//eclipse-spring-setup</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.</p>

<p>이번에는 <strong>Eclipse에서 Spring 초기 설정</strong>에 대해서 포스팅하겠습니다.</p>

<p><strong>순서</strong></p>
<blockquote>
  <ol>
    <li>spring plugin install</li>
    <li>spring mvc project 생성</li>
    <li>tomcat 설치 후 서버 실행</li>
    <li>프로젝트 실행</li>
    <li>한글 인코딩 문제 해결</li>
  </ol>
</blockquote>

<p><strong>1. spring plugin install</strong><br />
먼저 Eclipse에서 Spring plugin을 설치하도록 하겠습니다. <br />
Help -&gt; Market places -&gt; sts검색 -&gt; spring mvc plugin 설치
여기서는 spring plugin 3.x 버전으로 하겠습니다.</p>

<p><img src="/assets/images/2018-12-09-eclipse-spring-setup/spring1.png" />
위 이미지처럼 간단히 검색하여 spring plugin을 쉽게 설치 할 수 있습니다.</p>

<p><strong>2. spring mvc project 생성</strong><br />
다음으로는 Spring mvc project 생성하는 방법입니다. 
File -&gt; new -&gt; other -&gt; spring -&gt; spring legacy project를 통해 프로젝트를 생성해줍니다. 
<img src="/assets/images/2018-12-09-eclipse-spring-setup/spring2.png" />
프로젝트 생성이 완료되었습니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/springfolder.png" /></p>

<p><strong>3.tomcat 설치 후 서버 실행</strong><br />
이제는 구동 시킬 tomcat서버를 설치하도록 하겠습니다. <br />
File -&gt; new -&gt; other -&gt; server -&gt; server를 통해 server프로젝트를 생성하시면 됩니다. 
이떄 주의점은 맞는 tomcat 버전서버를 미리 받으셔야합니다.
<a href="http://tomcat.apache.org/">tomcat</a> 설치 주소입니다. 접속하셔서 알맞는 버전을 받으시면 됩니다.</p>

<p><img src="/assets/images/2018-12-09-eclipse-spring-setup/tomcat1.png" />
서버가 잘 생성이 된다면 아래와 같은 구조로 생성됩니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/tomcat2.png" /></p>

<p><strong>4. 프로젝트 실행</strong><br />
이제 tomcat서버를 실행 시키고 만들었던 spring 프로젝트를 실행해보도록 하겠습니다.</p>

<p>실행이 잘 된다면 아래와 같은 화면이 보여질것입니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/spring3.png" /></p>

<p>만약 404에러가 발생한다면 spring프로젝트를 실행시킬때 프로젝트 폴더내에서 파일을 실행시키지 않았는지 확인 하셔야합니다.<br />
spring 프로젝트를 실행시킬떄는 project최상위 폴더에서 프로젝트를 실행시켜야 404 에러없이 위와 같은 화면을 보실 수 있습니다.</p>

<p><strong>5. 한글 인코딩 문제 해결</strong> <br />
하지만 화면을 보시면 한글 인코딩 문제로 한글이 깨지는 것을 확인하실수 있습니다. <br />
이제 해당 문제를 해결해보겠습니다.<br />
<code class="highlighter-rouge">src -&gt; main -&gt; webapp -&gt; resources -&gt; WEB-INF -&gt; views -&gt; home.jsp</code>
spring 프로젝트내에서는 home.jsp가 디폴트로 생성되어있을것입니다. 물론 home.jsp가 스프링 실행 첫 화면입니다.
home.jsp에서 해당 코드를 삽입해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="sx">%@ page language="java" contentType="text/HTML;charset=UTF-8" pageEncoding="UTF-8" %&gt;
&lt;%
request.setCharacterEncoding("UTF-8");
%&gt;</span></code></pre></figure>

<p>다음으로
<code class="highlighter-rouge">src -&gt; main -&gt; webapp -&gt; resources -&gt; WEB-INF -&gt; web.xml</code>
web.xml파일에 해당 내용을 추가해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">	<span class="o">&lt;</span><span class="n">filter</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">filter</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">encodingFilter</span><span class="o">&lt;</span><span class="sr">/filter-name&gt;
                &lt;filter-class&gt;
                        org.springframework.web.filter.CharacterEncodingFilter
                &lt;/</span><span class="n">filter</span><span class="o">-</span><span class="k">class</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="n">init</span><span class="o">-</span><span class="n">param</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="n">param</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">encoding</span><span class="o">&lt;</span><span class="sr">/param-name&gt;
                        &lt;param-value&gt;UTF-8&lt;/</span><span class="n">param</span><span class="o">-</span><span class="n">value</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="sr">/init-param&gt;
	&lt;/</span><span class="n">filter</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">filter</span><span class="o">-</span><span class="n">mapping</span><span class="o">&gt;</span>
	        <span class="o">&lt;</span><span class="n">filter</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">encodingFilter</span><span class="o">&lt;</span><span class="sr">/filter-name&gt;
	        &lt;url-pattern&gt;/</span><span class="o">*&lt;</span><span class="sr">/url-pattern&gt;
	&lt;/</span><span class="n">filter</span><span class="o">-</span><span class="n">mapping</span><span class="o">&gt;</span></code></pre></figure>

<p>위에 두개의 설정 코드를 입력하신 후 프로젝트 재시작을 하시면 
아래와 같이 한글이 잘 나오는 것을 확인하실수 있습니다.
<img src="/assets/images/2018-12-09-eclipse-spring-setup/spring4.png" /></p>

<p>여기까지 eclipse에서 spring 초기 환경 설정에대해서 포스팅했습니다. <br />
물론 sts 에디터라와 spring boot와 같이 초기에 쉬운 설정을 할 수 있는 방법들이 있지만 
기존에 방식대로 설정하는 방법이었습니다. ㅎㅎ</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>


</channel>
</rss>
