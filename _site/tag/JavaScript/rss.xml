<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ghwlchlaks.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>같이 배워가는 IT 블로그입니다~. Python, JavaScript, nodejs, Github, algorithm, etc</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Node.js 와 Apache 연동</title>
	  <link>//nodejs-apache</link>
	  <author></author>
	  <pubDate>2018-10-16T21:00:00+09:00</pubDate>
	  <guid>//nodejs-apache</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ<br />
이번 포스팅 부터는 횟수를 세지 않았습니다!</p>

<p>이번에 포스팅할 내용은 <strong>Node.js 서버와 Apache서버를 Proxy</strong>를 사용하여 연동하는 방법에대해 알아보겠습니다.</p>

<p>proxy를 사용하여 apache로 들어온 정보를 node.js에게 전달해주는 방식입니다.</p>

<ul>
  <li><strong>필요한 apache모듈 활성화</strong></li>
  <li><strong>가상 호스트 설정</strong></li>
</ul>

<h2 id="1-필요한-apache모듈-활성화"><strong>1. 필요한 apache모듈 활성화.</strong></h2>
<p>먼저 mod_proxy, mod_proxy_http가 설치되어있어야합니다. 하지만 ubuntu에서 apache서버는 기본적으로 모듈이 설치되어있습니다.</p>

<p>처음에는 두개의 모듈이 비활성화 되어있을겁니다.<br />
활성화를 하는 방법은</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">sudo</span> <span class="n">a2enmod</span> <span class="n">proxy</span>  
<span class="n">sudo</span> <span class="n">a2enmod</span> <span class="n">proxy_http</span>  </code></pre></figure>

<p>명령어를 사용하여 활성화 해줍니다.</p>

<h2 id="2-가상-호스트-설정"><strong>2. 가상 호스트 설정.</strong></h2>
<ul>
  <li>/etc/apache2/sites-available폴더로 이동합니다.</li>
  <li>해당 폴더에 들어가서 000으로 시작하는 파일 내용을 수정합니다. 만약 새롭게 파일을 만들고 싶다면 파일을 cp명령어로 복사를 한 후 <code class="highlighter-rouge">e2sites '파일이름'</code>으로 등록을 해주어야 합니다.</li>
  <li>새롭게 파일을 등록 한 후 확인하려면 sites-enabled 폴더 안에softLink로된 같은 파일이 잘 등록 되어있는지 확인합니다. softLink파일인지 확인하는 방법은 <code class="highlighter-rouge">ls -l</code> 명령어를 입력하였을 떄 
lrwxr-xr-x 1 test test 5 Mar 7 22:00 link1 -&gt; file1<br />
위와 같이 맨앞에 <code class="highlighter-rouge">l</code>문자와 <code class="highlighter-rouge">-&gt;</code>기호가 있으면됩니다. 우분투에서는 파일이 초록색으로 나오네요?ㅎㅎ</li>
  <li>해당 파일의 내용을 작성해봅니다.!</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="no">VirtualHost</span> <span class="o">*</span><span class="p">:</span><span class="mi">80</span><span class="o">&gt;</span>  
<span class="c1">#The Server Name directive sets the request schema, hostname and port that  </span>
<span class="c1">#the server uses to identify itself. This is used when creating  </span>
<span class="c1">#redirection URLs. In the context of virtual hosts, the ServerName  </span>
<span class="c1">#specifies what hostname must appear in the request's Host: header to  </span>
<span class="c1">#match this virtual host. For the default virtual host (this file) this  </span>
<span class="c1">#value is not decisive as it is used as a last resort host regardless.  </span>
<span class="c1">#However, you must set it for any further virtual host explicitly.  </span>
<span class="c1">#ServerName www.example.com  </span>

<span class="no">ServerAdmin</span> <span class="n">webmaster</span><span class="vi">@localhost</span>  
<span class="no">DocumentRoot</span> <span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">html</span>  

<span class="c1">#Available loglevels: trace8, ..., trace1, debug, info, notice, warn,  </span>
<span class="c1">#error, crit, alert, emerg.  </span>
<span class="c1">#It is also possible to configure the loglevel for particular  </span>
<span class="c1">#modules, e.g.  </span>
<span class="c1">#LogLevel info ssl:warn  </span>

<span class="no">ErrorLog</span> <span class="err">$</span><span class="p">{</span><span class="no">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">error</span><span class="p">.</span><span class="nf">log</span>  
<span class="no">CustomLog</span> <span class="err">$</span><span class="p">{</span><span class="no">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">access</span><span class="p">.</span><span class="nf">log</span> <span class="n">combined</span>  

<span class="c1">#For most configuration files from conf-availalbe/, which are  </span>
<span class="c1">#enabled or disabled at a global level, it is possible to  </span>
<span class="c1">#include a line for only one particular virtual host. For example the  </span>
<span class="c1">#follwing line enables the CGI configuration for this host only  </span>
<span class="c1">#after it has been globally disabled with "a2disconf".  </span>
<span class="c1">#Include conf-available/serve-cgi-bin.conf  </span>
  
<span class="no">ProxyPass</span> <span class="sr">/url http:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">url</span></code></pre></figure>

<p><code class="highlighter-rouge">ProxyPass</code>부분을 보시면 됩니다. <code class="highlighter-rouge">ProxyPass 접속url nodejsurl</code> 이러한 형식으로 설정을 계속 추가해 보시면 웹에서 접속url에 접근하였을때 nodejsUrl로 전달해주는 방식이 됩니다.!<br />
<code class="highlighter-rouge">service apache restart</code> 이후 apache를 재시작 해주시면 설정이 적용됩니다!!</p>

<p>생각외로 간단합니다! 하지만 안해보면 모른다는.. 한번 테스트 해보시면 좋을것 같네요~</p>

<p>지금까지 <strong>Node.js 와 Apache 연동 방법</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>[Node.js] 윈도우에서 Node.js 설치</title>
	  <link>//nodejs-installation-window</link>
	  <author></author>
	  <pubDate>2018-10-14T07:00:00+09:00</pubDate>
	  <guid>//nodejs-installation-window</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 아홉번째 게시물입니다. ㅎㅎ<br />
이번에 포스팅할 내용은 여덟번째 내용이었던 <a href="https://ghwlchlaks.github.io/nodejs-installation-ubuntu/">리눅스에서 Node.js 설치</a>에 이어 윈도우 운영체제 환경에서 Node.js를 설치하는 방법에 대해서 알아보겠습니다.!</p>

<p><strong>1. Node.js <a href="https://nodejs.org/">공식 사이트</a>에 접속하기.</strong>
접속하시면 자신의 운영체제에 맞게 페이지가 등장합니다!<br />
<img src="/assets/images/2018-10-13-nodejs-installation-window/node-org.png" />
해당 페이지에서 LTS버전을 클릭하여 윈도우 node.js 설치 파일을 다운받습니다!</p>

<p><strong>2. 설치 진행</strong>
설치 파일을 더블클릭하여 윈도우에서 Node.js 설치를 진행합니다.
특별한 설정을 할 이유가 없으면 계속해서 Next를 클릭하여 진행합니다!</p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step1.png" /></p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step2.png" /></p>

<p>여기서는 nodejs 폴더를 지정해줍니다. default로 해둬 상관이없다면 <strong>Next!</strong><br />
<img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step3.png" /></p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step4.png" /></p>

<p>설치가 완료되고 나면 아까 폴더 경로를 설정한 위치로 이동합니다!<br />
<img src="/assets/images/2018-10-13-nodejs-installation-window/nodejs-folder.png" />
잘 설치된 것을 확인하시면됩니다.!</p>

<p>설치가 너무 쉽죠? ㅎㅎ</p>

<p><strong>3. 예제 코드 실행!</strong><br />
이제 예제 소스를 실행해 잘 설치가 되었는지 확인해 봅시다!
app.js를 만들어 전에 사용했던 예제소소를 여기서도 이용해보겠습니다.!</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Hello world"</span><span class="p">);</span>  </code></pre></figure>

<p>해당 내용을 작성 후 저장합니다.</p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-example.png" /></p>

<p>위에 사진처럼 생성되면 됩니다!</p>

<p>이후 해당파일을 실행해 보겠습니다.
cmd를 이용하여 해당 파일의 경로로 이동 후 <code class="highlighter-rouge">node app.js</code>로 해당파일을 실행할 수 있습니다.!<br />
결과는 역시 <strong>Hello world</strong>겠죠?</p>

<p>이번엔 <strong>간단한 웹서버</strong>를 만들어보겠습니다.<br />
<strong>app.js</strong>코드를 수정하도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">var</span> <span class="n">http</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">);</span>

<span class="n">var</span> <span class="n">server</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">(</span><span class="n">function</span> <span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">'Content-Type'</span> <span class="p">:</span> <span class="s1">'text/plain'</span> <span class="p">});</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="s1">'Hello World'</span><span class="p">);</span>
<span class="p">});</span>

<span class="n">server</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span></code></pre></figure>

<p>해당 내용을 작성 후</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="n">app</span><span class="p">.</span><span class="nf">js</span>  </code></pre></figure>

<p>를 실행하게 되면 간단하게 <strong>웹서버가</strong> 실행이 됩니다.<br />
물론 기능을 더 넣으려면 코드를 추가 해야겠죠?<br />
웹 서버가 실행이 됐는지 확인하는 방법은 http://127.0.0.1:3000으로 접속하시면 화면에 Hello World가 출력 되는 것을 확인 하실 수 있습니다.!</p>

<p>하지만 항상 cmd로 접속하여 경로를 찾고 실행시키면 번거롭겠죠?<br />
자신이 자주 사용하는 에디터에 콘솔 기능으로 쉽게 실행 시킬 수 있습니다. <br />
저는 VSCode를 사용하는데요 콘솔기능이 있어 에이터 안에서 서버를 실행 시킬 수 있어 편리하답니다!
여러분들도 자신이 주로 사용하는 에디터에서 쉽게 접근해 사용해보세요!!</p>

<p>지금까지 <strong>윈도우에서 Node.js설치 방법</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[Node.js] 리눅스에서 Node.js 설치</title>
	  <link>//nodejs-installation-ubuntu</link>
	  <author></author>
	  <pubDate>2018-10-12T07:00:00+09:00</pubDate>
	  <guid>//nodejs-installation-ubuntu</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 여덟번째 게시물입니다. ㅎㅎ<br />
오늘은 우분투 운영체제 환경에서 Node.js를 설치하는 방법에 대해서 알아보겠습니다.!</p>

<p><a href="https://github.com/nodesource/distributions">nodejs-github</a>과 <a href="https://nodejs.org/ko/download/package-manager/">nodejs공식페이지</a>을 보시면 잘 설명 되어있습니다.</p>

<p><strong>데비안(Debian)과 우분투(Ubuntu)에서 설치하는 방법.</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">-</span><span class="n">sL</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">deb</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_8</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="o">-</span><span class="no">E</span> <span class="n">bash</span> <span class="o">-</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">nodejs</span></code></pre></figure>

<p><code class="highlighter-rouge">Node.js 10를 사용하고 싶다면 다음을 실행합니다.</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">-</span><span class="n">sL</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">deb</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_10</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="o">-</span><span class="no">E</span> <span class="n">bash</span> <span class="o">-</span>  
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">nodejs</span>  </code></pre></figure>

<p>추가적으로<br />
<strong>RHEL, CentOS, Fedora에서 설치하는 방법</strong>도 간단하게 설명하겠습니다</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">--</span><span class="n">silent</span> <span class="o">--</span><span class="n">location</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">rpm</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_8</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">bash</span> <span class="o">-</span>  
<span class="n">sudo</span> <span class="n">yum</span> <span class="o">-</span><span class="n">y</span> <span class="n">install</span> <span class="n">nodejs</span>  </code></pre></figure>

<p><code class="highlighter-rouge">Node.js 10를 사용하고 싶다면 다음을 실행합니다.</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">--</span><span class="n">silent</span> <span class="o">--</span><span class="n">location</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">rpm</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_10</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">bash</span> <span class="o">-</span>  
<span class="n">sudo</span> <span class="n">yum</span> <span class="o">-</span><span class="n">y</span> <span class="n">install</span> <span class="n">nodejs</span>  </code></pre></figure>

<p>설치가 아주 간단하죠?ㅎㅎ</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="o">-</span><span class="n">v</span>  
<span class="n">npm</span> <span class="o">-</span><span class="n">v</span>  </code></pre></figure>

<p>해당 명령어로 nodejs와 npm이 잘 설치 되었는지 확인합니다.</p>

<p>간단하게 예제 코드를 보도록 하겠습니다! <br />
<strong>app.js</strong>를 생성한 후</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Hello world"</span><span class="p">);</span>  </code></pre></figure>

<p>해당 내용을 작성 후 저장합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="n">app</span><span class="p">.</span><span class="nf">js</span>  
<span class="c1">#=&gt; Hello world  </span></code></pre></figure>

<p>해당 결과 값이 출력되면 됩니다!!</p>

<p>이번엔 <strong>간단한 웹서버</strong>를 만들어보겠습니다.<br />
Node.js가 다른 웹서버와 다른 장점 중 하나는 빠르게 웹서버를 만들 수 있는것입니다!ㅎㅎ<br />
<strong>app.js</strong>코드를 수정하도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">var</span> <span class="n">http</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">);</span>

<span class="n">var</span> <span class="n">server</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">(</span><span class="n">function</span> <span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">'Content-Type'</span> <span class="p">:</span> <span class="s1">'text/plain'</span> <span class="p">});</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="s1">'Hello World'</span><span class="p">);</span>
<span class="p">});</span>

<span class="n">server</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span></code></pre></figure>

<p>해당 내용을 작성 후</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="n">app</span><span class="p">.</span><span class="nf">js</span>  </code></pre></figure>

<p>를 실행하게 되면 간단하게 <strong>웹서버가</strong> 실행이 됩니다.<br />
물론 기능을 더 넣으려면 코드를 추가 해야겠죠?<br />
웹 서버가 실행이 됐는지 확인하는 방법은 http://127.0.0.1:3000으로 접속하시면 화면에 Hello World가 출력 되는 것을 확인 하실 수 있습니다.!</p>

<p>지금까지 <strong>리눅스에서 Node.js설치 방법</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[Node.js] NodeJs란 무엇인가?</title>
	  <link>//what-nodejs</link>
	  <author></author>
	  <pubDate>2018-10-10T09:00:00+09:00</pubDate>
	  <guid>//what-nodejs</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 일곱번째 게시물입니다. ㅎㅎ<br />
전에 말씀 드렸다시피 오늘은 <strong>NodeJS란 무엇인가?</strong>라는 내용을 포스팅하려고 합니다.</p>

<p><strong>NodeJS는</strong> 확상성 있는 네트워크 애플리케이션 특히 서버사이드 개발에 
사용되는 소프트웨어 플랫폼입니다.<br />
작성 언어로 자바스크립트(JavaScript)를 활용하며 Non-blocking I/O와 단일 스레드 이벤트 루프를 통한 높은 처리 성능을 가지고 있습니다. <br />
그러니 Node.js를 사용하려면 자바스크립트를 알아야겠죠?</p>

<p><strong>Non-blocking I/O란?</strong>  <br />
기존의 I/O 처리 방법에는 I/O작업을 시작하면 
완료될 때 까지 기다리는 방법으로 수많은 I/O 작업이 있는 경우
I/O 작업이 진행되는 동안 프로그램이 아무일도 하지 않고 시간을 소비하게 만듭니다. <br />
하지만 Non-blocking I/O방식에서는 입출력 처리는 시작만 해둔 채 완료되지 않은 상태에서 다른 처리 작업을 계속 진행 할 수 있도록 멈추지 않고 입출력 처리를 기다리는 방법을 말합니다!</p>

<p>내장 HTTP 서버 라이브러리를 포함하고 있어 웹 서버에서 Apache, Nginx 등의 별도의 소프트웨어 없이 NodeJS만으로 동작하는 것이 가능하며 이를 통해 웹서버의 동작에 있어 더 많은 통제를 가능케 합니다.!</p>

<p><strong>단일 스레드 이벤트 루프란?</strong><br />
하나의 쓰레드(Thread)에서 이벤트 루프를 돌려, 이벤트가 발생하면 해당 되는 함수를 실행시키기 때문에 단일한 Thread로 여러 요청처리가 가능합니다. <br />
Event Loop는 단일 Thread지만 Thread Pool 내부는 여러개의 Thread를 사용하여 Event Loop가 Callback함수를 내부에 여러 Thread들에게 요청을 할당해 줍니다. 
그리고 작업이 끝난 작업들은 Event Loop가 순차적으로 Event Queue에 할당합니다.</p>

<p>그리고 한개 더 알아야할 것! <strong>비동기</strong>입니다.!</p>

<p><strong>비동기란?</strong><br />
간단합니다! <strong>순서가 정해지지 않는다</strong> 라는 의미입니다.<br />
비동기와 Non-blocking 방식이 같다고 생각하시분들이 있으실텐데요!   <strong>의미는 다릅니다.!</strong><br />
<strong>Non-blocking 방식</strong>은 입출력처리가 시작되고 완료되지 않은 상태에서 반환하여 다른 처리를 할 수 있도록 하는 것이고,  <strong>비동기 방식</strong>은 어떤 수행이 완료되었을 때 NodeJS의 콜백함수와 같은 신호를 보내 알려주는 것입니다!<br />
비동기방식에서는 함수를 호출한 쪽에서 처리하지 않고 콜백함수를 통해 처리합니다!</p>

<p>어려운내용이네요..ㅠㅠ 크게 <strong>NodeJS</strong>의 특징에대해서 알아보았습니다. 
그럼 이제 예제를 한번 해보고 마치도록 하겠습니다.</p>

<p><strong>NodeJS</strong>는 다른 서버언어와 다르게 간단히 코드 몇줄로 서버를 구성할 수 있습니다. 
아래 예시를 한번 봅시다! ㅎㅎ</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">var</span> <span class="n">http</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">);</span>

<span class="n">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">(</span><span class="n">function</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span><span class="p">:</span> <span class="s1">'text/plain'</span><span class="p">});</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="s1">'Hello World\n'</span><span class="p">);</span>
<span class="p">}).</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>

<span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s1">'Server running at http://localhost:3000/'</span><span class="p">);</span></code></pre></figure>

<p>한번 테스트해보시고 사용해보시면 좋을것같습니다.!<br />
지금까지 <strong>Node.js란?</strong>이라는 주제로 포스팅하였습니다!<br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>[Node.js] 정적(static) 파일 import (css, image)</title>
	  <link>//static-path-nodejs</link>
	  <author></author>
	  <pubDate>2018-10-09T09:00:00+09:00</pubDate>
	  <guid>//static-path-nodejs</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 여섯번째 게시물입니다. ㅎㅎ<br />
지금까지 파이썬 언어에대해 포스팅 해왔는데요.. <br />
사실 파이썬은 알고리즘 공부땜에 파이썬 언어로 공부하며 알고리즘공부도 하고 있습니다.</p>

<p>이번에는 서버 프레임워크 중 하나인 <strong>Node.js의 static경로 설정 방법</strong>에 대해 포스팅하도록 하겠습니다. <br />
제가 전에 경로땜에 살짝 헤맸다는…</p>

<p>막상 포스팅을 시작하려니 Node.js의 개념에대해 먼저 포스팅을 했어야했다는 것이 생각이나네요..<br />
아직 블로그 초보라..하하..<br />
다음에는 Node.js 개념에대해 포스팅하도록 하겠습니다.!</p>

<p>Node.js에서 <strong>static</strong>경로를 설정하는 방법에대해서 알아 보아요~<br />
여기서는 기본적으로 <strong>express-generator</strong>로 생성한 Node.js 폴더라는 가정하에 다루도록하겠습니다.!</p>

<p>Node를 사용하면서 ejs나 pug 등과 같은 확장자를 만질때가 있을텐데요~<br />
자신이 추가하고자하는 외부 css파일이나 image파일을 Node.js 폴더내에 추가하고 
view에서 접근하여도 css나 image가 적용이 되지 않는 당황스러운 경험을 하실 수 있는데요~<br />
이때 css와 image가 적용이 되지않는 문제를 해결해보도록 하겠습니다!</p>

<p>Node.js폴더내에 app.js를 확인해보면~</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="n">express</span><span class="p">.</span><span class="nf">static</span><span class="p">(</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">__dirname</span><span class="p">,</span> <span class="s1">'../public'</span><span class="p">)));</span></code></pre></figure>

<p>이러한 코드를 확인 하실 수 있을것입니다!
이코드는 express-generator로 생성한 폴더라면 default로 설정되어있습니다.</p>

<p>해당 코드의 의미는 정적(static)한 파일을 이곳에 넣어두면 <code class="highlighter-rouge">/</code> 경로로 ejs파일내에서 public폴더내에 있는 파일을 접근 할 수 있다는 의미입니다.</p>

<p>예를들어 <code class="highlighter-rouge">/public/test.jpg</code> 라는 파일이 <strong>public 폴더</strong>내에 존재한다면
ejs파일내에서 <code class="highlighter-rouge">src=/test.jpg </code>로 접근을 할 수 있습니다.!!</p>

<p>만약 default로 설정된 <code class="highlighter-rouge">/</code> 경로가 아닌 다른 정적(static) 폴더를 만들고 다른 경로를 만들어서 사용하고 싶으시다면 app.js 파일에</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="s1">'/ejs에서접근할경로'</span><span class="p">,</span> <span class="n">express</span><span class="p">.</span><span class="nf">static</span><span class="p">(</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">__dirname</span><span class="p">,</span> <span class="s1">' /실제위치한디렉토리경로'</span><span class="p">)));</span>  </code></pre></figure>

<p>해당 코드를 입력하고~<br />
<strong>ejs</strong>에서 <code class="highlighter-rouge">src=/ejs에서접근할경로/정적(static)파일위치</code> 로 접근하시면
image,css와같은 파일들의 자원을 사용하실 수 있습니다!!</p>

<p>한번 테스트해보시고 사용해보시면 좋을것같습니다.!<br />
지금까지 <strong>Node.js에서 정적(static)</strong> 파일 사용하는 방법이었습니다!<br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>


</channel>
</rss>
