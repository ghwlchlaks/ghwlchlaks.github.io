<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ghwlchlaks.github.io/</title>
   
   <link>https://ghwlchlaks.github.io</link>
   <description>같이 배워가는 IT 블로그입니다~. Python, JavaScript, nodejs, Github, algorithm, etc</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Jekyll custom plugin (로컬은되는데 원격은 안될때) [Jekyll]</title>
	  <link>//Jekyll-custom-plugin</link>
	  <author></author>
	  <pubDate>2018-12-01T09:00:00+09:00</pubDate>
	  <guid>//Jekyll-custom-plugin</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 입니다.<br />
오래만에 포스팅합니다.ㅠㅠ 요즘 다른일에 집중하느라.. (핑계..)</p>

<p>이번에는 제가 Jekyll theme에 기능들을 수정하다가 생긴 이슈에 대해서 생긴 이슈를 해결하는 방법에대해서 설명드리도록 하겠습니다.</p>

<p>jekyll plugin에서 custom plugin을 보실수 있습니다. 그런데 여러가지 기능을 추가하다보면 local상에서는 정상 작동되는데 github에 업로드하여 사이트에 접속했을때는 404 에러 혹은 문제가 발생할 수 있습니다. (경로문제가 아닐때 ㅎㅎ)</p>

<p>해당 이슈를 해결하는 방법에대해서 포스팅 하겠습니다.</p>

<p>해당 이슈가 생기는 이유는 github에서 보안 문제로 custom plugin이 적용이되지 않는다고 하네요 ㅎㅎ</p>

<p><strong>해결 순서</strong></p>
<blockquote>
  <ol>
    <li>local repository상에서 master브랜치에서 분기한 다른 브랜치를 생성  (여기서는 source 브랜치 생성)</li>
    <li>local repository와 remote repository에서 master브랜치 삭제</li>
    <li>source브랜치에서 .gitignore파일 _site폴더 주석 혹은 삭제 처리</li>
    <li>source브랜치에서 .nojekyll 파일 생성 및 _config.yml 파일 수정</li>
    <li>source브랜치에서 _site폴더만 필터링 해서 master브랜치 생성</li>
    <li>master브랜치와 source브랜치 전체 push 하기</li>
    <li>웹사이트 정상 작동 확인</li>
    <li>해당 순서를 shell script를 만들어서 간편화 하기</li>
  </ol>
</blockquote>

<p>해당 순서만 보고 따라해도 되겠지만 왜 저렇게 하는지 가볍게 알고 넘어가는게 좋겠죠?
우선 github 블로그는 master브랜치만 적용이되어 블로그가 생성 및 갱신됩니다. <br />
그래서 master브랜치에 아예 local에서 정상 작동되는 _site폴더를 master브랜치에 push하여 해결하는 방식입니다. <br />
여기서 _site폴더는 local에서 jekyll build를 할때 갱신되는 것은 알고 계실것이라고 생각합니다. <br />
그리고 source브랜치는 _post및 전체 블로그의 소스를 관리하는 브랜치입니다.<br />
여기서 갱신및 추가한 소스를 jekyll build하여 _site폴더가 갱신되면
해당 _site를 필터링하여 master브랜치에 업로드하는 방식입니다.</p>

<p>그럼 해결 순서대로 시작해보겠습니다.</p>

<p><strong>1. local repository상에서 master브랜치에서 분기한 다른 브랜치를 생성(여기서는 source 브랜치 생성)</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">source</span>
<span class="o">=&gt;</span> <span class="n">source</span> <span class="err">브랜치를</span> <span class="err">생성하고</span> <span class="err">해당</span> <span class="err">브랜치로</span> <span class="err">이동</span></code></pre></figure>

<p><strong>2. local repository와 remote repository에서 master브랜치 삭제</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="ss">:master</span>
<span class="o">=&gt;</span> <span class="n">remote</span> <span class="n">repository</span><span class="err">에</span> <span class="n">master</span><span class="err">브랜치</span> <span class="err">삭제</span>
<span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="no">D</span> <span class="n">master</span>
<span class="o">=&gt;</span> <span class="n">local</span> <span class="n">repository</span><span class="err">에서</span> <span class="n">master</span><span class="err">브랜치</span> <span class="err">삭제</span></code></pre></figure>

<p><strong>3. source브랜치에서 .gitignore파일 _site폴더 주석 혹은 삭제 처리</strong><br />
기본적으로 _site폴더는 .gitignore에서 업로드 못하게 되어있습니다. 
이 주석을 제거해줍시다!</p>

<p><strong>4. source브랜치에서 .nojekyll 파일 생성 및 _config.yml 파일 수정</strong><br />
.nojekyll 파일을 생성
_config.yml파일 수정</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">include:  
  </span><span class="p">\</span><span class="o">-</span> <span class="p">.</span><span class="nf">nojekyll</span>
<span class="o">=&gt;</span> <span class="err">해당</span> <span class="err">코드를</span> <span class="err">추가해</span> <span class="err">줍니다</span><span class="o">!</span></code></pre></figure>

<p><strong>5. source브랜치에서 _site폴더만 필터링 해서 master브랜치 생성</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">filter</span><span class="o">-</span><span class="n">branch</span> <span class="o">--</span><span class="n">subdirectory</span><span class="o">-</span><span class="n">filter</span> <span class="n">_site</span> <span class="o">-</span><span class="n">f</span> <span class="no">HEAD</span>
<span class="o">=&gt;</span> <span class="err">현재</span> <span class="no">HEAD</span><span class="err">에서</span> <span class="n">_site</span> <span class="err">폴더를</span> <span class="err">필터링하는</span> <span class="err">명령어</span> <span class="err">입니다</span><span class="p">.</span> <span class="nf">git</span><span class="err">에서</span> <span class="err">제공하고요</span><span class="o">~</span></code></pre></figure>

<p><strong>6. master브랜치와 source브랜치 전체 push 하기</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">all</span> 
<span class="o">=&gt;</span> <span class="err">전체</span> <span class="n">branch</span><span class="err">를</span> <span class="n">push</span> <span class="err">하는</span> <span class="err">명령어입니다</span><span class="o">.</span></code></pre></figure>

<p><strong>7. 웹사이트 정상 작동 확인</strong><br />
업로드 후 자신의 사이트에서 정상 작동하는지 확인하시면 됩니다.
기본적으로 github 브랜치 구조는 다음과 같습니다.</p>

<p>master branch (source 브랜치에서 build된 _site폴더내부)<br />
<img src="/assets/images/2018-12-01-Jekyll-custom-plugin/master.PNG" /></p>

<p>source branch (소스를 관리하는 전체 소스)<br />
<img src="/assets/images/2018-12-01-Jekyll-custom-plugin/source.PNG" /></p>

<p><strong>8. 해당 순서를 shell script를 만들어서 간편화 하기</strong><br />
매번 위와 같이 반복작업을 하다보면 매우 귀찮겠죠? 이것을 한번에 처리하기 위해 
shell script를 만들어 보겠습니다 파일명.sh을 만든 후 해당 코드를 입력합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#!/bin/bash</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="n">source</span>
<span class="o">=&gt;</span> <span class="n">source</span> <span class="err">브랜치로</span> <span class="err">이동</span> 
<span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="no">D</span> <span class="n">master</span>
<span class="o">=&gt;</span> <span class="err">병합되지</span> <span class="err">않은</span> <span class="n">master</span> <span class="err">브랜치</span> <span class="err">삭제</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">master</span>
<span class="o">=&gt;</span> <span class="n">master</span><span class="err">브랜치</span> <span class="err">생성</span> <span class="p">(</span><span class="err">당연히</span> <span class="n">souce</span><span class="err">브랜치에서</span> <span class="n">build</span><span class="err">후</span> <span class="n">git</span> <span class="n">add</span><span class="p">,</span> <span class="n">git</span> <span class="n">commit</span><span class="err">을</span> <span class="err">한</span> <span class="err">이후여야겠죠</span><span class="p">?)</span>
<span class="n">git</span> <span class="n">filter</span><span class="o">-</span><span class="n">branch</span> <span class="o">--</span><span class="n">subdirectory</span><span class="o">-</span><span class="n">filter</span> <span class="n">_site</span> <span class="o">-</span><span class="n">f</span> <span class="no">HEAD</span>
<span class="o">=&gt;</span> <span class="err">브랜치</span> <span class="err">필터링을</span> <span class="err">통해</span> <span class="n">_site</span> <span class="err">추출</span>
<span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">all</span>
<span class="o">=&gt;</span> <span class="n">master</span><span class="p">,</span> <span class="n">source</span> <span class="err">브랜치</span> <span class="err">모두</span> <span class="n">github</span><span class="err">에</span> <span class="n">push</span>
<span class="n">git</span> <span class="n">checkout</span> <span class="n">source</span>
<span class="o">=&gt;</span> <span class="err">다시</span> <span class="err">소스를</span> <span class="err">관리하는</span> <span class="n">source</span> <span class="err">브랜치로</span> <span class="err">이동</span></code></pre></figure>

<p>이렇게 shell script를 만든 후 윈도우는 환경변수 설정을 해주시면 되는데요 <br />
저는 에디터에서 파일경로 복사하고 에디터 터미널에 붙여넣기 하는 방식으로 합니다. <br />
편하신 방법으로 하시면 되겠습니다.</p>

<p>물론 당연한거지만 <code class="highlighter-rouge">주의하실점</code>은 source브랜치에서 bundle exec jekyll build or bundle exec jekyll serve 명령어로 build하신 후 (local에서 확인 하실 꺼니깐 당연히 하실꺼라 생각합니다.) git add, git commit을 하셔야합니다. <br />
그래야 _site폴더가 갱신된 상태에서 local repository에 적용이 되니깐요 ㅎㅎ<br />
그 후 쉘스크립트 또는 위에 순서대로 진행하시면 됩니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL2] 주식가격 프로그래머스 [파이썬]</title>
	  <link>//Algorithm-stockprice</link>
	  <author></author>
	  <pubDate>2018-10-21T21:00:00+09:00</pubDate>
	  <guid>//Algorithm-stockprice</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은 스택(stack)/큐(queue)와 관련된 <strong>프로그래머스 문제 LEVEL2에 해당되는 주식가격 알고리즘 문제</strong>를 풀어보도록 하겠습니다.</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/42584">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 유지된 기간은 몇 초인지를 계산하는 문제입니다.</p>

<p><strong>제한 사항</strong></p>
<blockquote>
  <ul>
    <li>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.</li>
    <li>prices의 길이는 2 이상 100,000 이하입니다.</li>
  </ul>
</blockquote>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  
<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">prices</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span><span class="n">prices</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="k">break</span>
            <span class="ss">else:
                </span><span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">answer</span></code></pre></figure>

<p>해당 문제는 스택/큐 부분이지만 이중 for문을 이용해서 풀었습니다.<br />
다른 분들이 푸신내용보니깐 큐를 이용해서 (pop(0)) 푸시는 분들도 많았습니다.<br />
사실 저도 큐를 이용하여 접근하였지만 시간초과가 발생해서 간단히 이중for문을 이용했습니다.<br />
시간의 큰차이는 없어보였는데 시간 제한사항이 역시나 민감하네요 
ㅎㅎ 처음에 시간초과가 발생해서 살짝 당황했습니다. ㅎㅎ</p>

<h1 id="풀이방법">풀이방법</h1>
<p>처음 i 변수를 가지는 for문은 비교할 기준의 요소를 정하는 인덱스입니다.<br />
안에 j 변수를 가지는 for문은 인덱스 i부터 끝까지 비교할 대상의 인덱스를 나타냅니다.<br />
안에 <code class="highlighter-rouge">if prices[i] &gt; prices[j]</code>는 기준에 비해 가격이 유지되지 않고 떨어지는 인덱스를 가졌을때 해당 for문을 벗어나는 코드입니다.<br />
<code class="highlighter-rouge">else</code>부분은 이외에는 count를 1씩 증가시켜줍니다.</p>

<p>지금까지 <strong>주식가격 프로그래머스 스택/큐 [파이썬]</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL2] 더맵게 프로그래머스 heap [파이썬]</title>
	  <link>//Algorithm-morespicy</link>
	  <author></author>
	  <pubDate>2018-10-20T21:00:00+09:00</pubDate>
	  <guid>//Algorithm-morespicy</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은 힙(Heap)과 관련된 <strong>프로그래머스 문제 LEVEL2에 해당되는 더맵게 알고리즘 문제</strong>를 풀어보도록 하겠습니다.</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/42626">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다.<br />
 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.</p>
<blockquote>
  <p>섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)</p>
</blockquote>

<p><strong>제한 사항</strong></p>
<blockquote>
  <ul>
    <li>scoville의 길이는 1 이상 1,000,000 이하입니다.</li>
    <li>K는 0 이상 1,000,000,000 이하입니다.</li>
    <li>scoville의 원소는 각각 0 이상 1,000,000 이하입니다.</li>
    <li>모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.</li>
  </ul>
</blockquote>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  
<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">scoville</span><span class="p">,</span> <span class="no">K</span><span class="p">):</span>
    <span class="n">import</span> <span class="n">heapq</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">s</span> <span class="k">in</span> <span class="ss">scoville:
        </span><span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="no">K</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">answer</span>
        <span class="n">a</span><span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="nf">heappop</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">data</span> <span class="o">!=</span> <span class="p">[]:</span>
            <span class="n">b</span> <span class="o">=</span><span class="n">heapq</span><span class="p">.</span><span class="nf">heappop</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">a</span> <span class="o">+</span> <span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">answer</span> <span class="o">+=</span><span class="mi">1</span>    
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span></code></pre></figure>

<p>해당 문제는 heapq 모듈을 import하여 해결하였습니다.<br />
heapq를 사용하지 않고 일반 배열에서 queue나 stack방식을 사용한다면 시간초과가 발생하네요.. ㅠㅠ<br />
heapq에대한 설명은 <a href="https://ghwlchlaks.github.io/Heapq-Python/">heapq를 사용해보자 [Python]</a> 에서 볼 수 있습니다. <br />
또한 heapq를 사용하여 다른 알고리즘 문제를 해결한 것은 <a href="https://ghwlchlaks.github.io/Algorithm-Heapq-Python/">이중우선순위큐 알고리즘 [Python]</a>에서 볼 수 있습니다.</p>

<p>지금까지 <strong>더맵게 프로그래머스 heap [파이썬]</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL2] 프린터 프로그래머스 스택/큐 [파이썬]</title>
	  <link>//Algorithm-printer</link>
	  <author></author>
	  <pubDate>2018-10-19T21:00:00+09:00</pubDate>
	  <guid>//Algorithm-printer</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은 스택/큐에 해당되는 <strong>프로그래머스 문제 LEVEL2에 해당되는 프린터 알고리즘 문제</strong>를 풀어보도록 하겠습니다.</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/42587">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>
<blockquote>
  <ol>
    <li>인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</li>
    <li>나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</li>
    <li>그렇지 않으면 J를 인쇄합니다.</li>
  </ol>
</blockquote>

<p><strong>제한 사항</strong></p>
<blockquote>
  <ul>
    <li>현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.</li>
    <li>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.</li>
    <li>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.</li>
  </ul>
</blockquote>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">priorities</span><span class="p">,</span> <span class="n">location</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">len</span><span class="p">(</span><span class="n">priorities</span><span class="p">)</span>
    <span class="n">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">priorities</span><span class="p">)):</span>
        <span class="n">array</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">location</span> <span class="k">in</span> <span class="ss">array:
        </span><span class="n">paper</span> <span class="o">=</span> <span class="n">priorities</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">idx_paper</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">isMax</span> <span class="o">=</span>  <span class="no">False</span>
        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">priorities</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">paper</span> <span class="o">&lt;</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">isMax</span> <span class="o">=</span> <span class="no">True</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="ss">isMax:
            </span><span class="n">priorities</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">paper</span><span class="p">)</span>
            <span class="n">array</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">idx_paper</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span> <span class="o">-</span> <span class="n">len</span><span class="p">(</span><span class="n">array</span><span class="p">)</span></code></pre></figure>

<p>해당 문제는 큐를 이용하여 해결하였습니다. <br />
저의 해결 방법은 순서를 나타내는 변수를 더 생성했습니다. (다른분들 풀이 보니깐.. 저건 비효율적인것같네요.ㅠㅠ)<br />
while문을 통해 배열에 찾고자하는 location이 없다면 while문을 빠져나오는 조건입니다. <br />
while문안에서는 맨앞에 요소를 pop(0)을 통해 꺼내고 남은 priorities 배열요소와 우선순위를 비교해서 큰 우선순위가 있으면 뒤로 append하고 없으면 pop(0) 연산만 하는 코드입니다.</p>

<p>다른분들에 코드를 보면 저의 부족함이 많이 느껴지네요.. ㅠㅠ</p>

<p>지금까지 <strong>프린터 프로그래머스 스택/큐 [파이썬]</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[프로그래머스 LEVEL2] 탑 프로그래머스 스택/큐 [파이썬]</title>
	  <link>//Algorithm-Top</link>
	  <author></author>
	  <pubDate>2018-10-18T21:00:00+09:00</pubDate>
	  <guid>//Algorithm-Top</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ</p>

<p>이번에 포스팅할 내용은 스택/큐에 해당되는 <strong>프로그래머스 문제 LEVEL2에 해당되는 탑 알고리즘 문제</strong>를 풀어보도록 하겠습니다.
오랜만에 알고리즘 문제를 풀어보겠습니다!</p>

<p>해당 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/42588">프로그래머스 웹페이지</a>에서 만나보실 수 있습니다.</p>

<h1 id="문제">문제</h1>
<p>수평 직선에 높이가 서로 다른 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다.</p>

<p>높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다. 그러면, 탑은 다음과 같이 신호를 주고받습니다. 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다.</p>

<p><strong>제한 사항</strong></p>
<ul>
  <li>heights는 길이 2 이상 100 이하인 정수 배열입니다.</li>
  <li>모든 탑의 높이는 1 이상 100 이하입니다.</li>
  <li>신호를 수신하는 탑이 없으면 0으로 표시합니다.</li>
</ul>

<h1 id="풀이">풀이</h1>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">heights</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">len</span><span class="p">(</span><span class="n">heights</span><span class="p">)</span>
    <span class="k">while</span> <span class="ss">heights:
        </span><span class="n">right</span> <span class="o">=</span> <span class="n">heights</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">idx</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">heights</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">heights</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="ss">right:
                </span><span class="n">answer</span><span class="p">[</span><span class="n">len</span><span class="p">(</span><span class="n">heights</span><span class="p">)]</span> <span class="o">=</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">break</span>
    <span class="k">return</span> <span class="n">answer</span></code></pre></figure>

<p>풀이 방법은 heights 배열에 오른쪽 부터 pop()을 한 후 pop()한 value와 남은 height의 원소들은 거꾸로 비교하여 큰 수가 나오면 해당 인덱스를 저장하는 방식입니다.<br />
마지막 원소를 pop()한다는 것에서 스택과 연관되어 풀수 있었네요 ㅎㅎ</p>

<p>지금까지 <strong>탑 프로그래머스 스택/큐 [파이썬]</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>Node.js 와 Apache 연동</title>
	  <link>//nodejs-apache</link>
	  <author></author>
	  <pubDate>2018-10-16T21:00:00+09:00</pubDate>
	  <guid>//nodejs-apache</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong>입니다. ㅎㅎ<br />
이번 포스팅 부터는 횟수를 세지 않았습니다!</p>

<p>이번에 포스팅할 내용은 <strong>Node.js 서버와 Apache서버를 Proxy</strong>를 사용하여 연동하는 방법에대해 알아보겠습니다.</p>

<p>proxy를 사용하여 apache로 들어온 정보를 node.js에게 전달해주는 방식입니다.</p>

<ul>
  <li><strong>필요한 apache모듈 활성화</strong></li>
  <li><strong>가상 호스트 설정</strong></li>
</ul>

<h2 id="1-필요한-apache모듈-활성화"><strong>1. 필요한 apache모듈 활성화.</strong></h2>
<p>먼저 mod_proxy, mod_proxy_http가 설치되어있어야합니다. 하지만 ubuntu에서 apache서버는 기본적으로 모듈이 설치되어있습니다.</p>

<p>처음에는 두개의 모듈이 비활성화 되어있을겁니다.<br />
활성화를 하는 방법은</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">sudo</span> <span class="n">a2enmod</span> <span class="n">proxy</span>  
<span class="n">sudo</span> <span class="n">a2enmod</span> <span class="n">proxy_http</span>  </code></pre></figure>

<p>명령어를 사용하여 활성화 해줍니다.</p>

<h2 id="2-가상-호스트-설정"><strong>2. 가상 호스트 설정.</strong></h2>
<ul>
  <li>/etc/apache2/sites-available폴더로 이동합니다.</li>
  <li>해당 폴더에 들어가서 000으로 시작하는 파일 내용을 수정합니다. 만약 새롭게 파일을 만들고 싶다면 파일을 cp명령어로 복사를 한 후 <code class="highlighter-rouge">e2sites '파일이름'</code>으로 등록을 해주어야 합니다.</li>
  <li>새롭게 파일을 등록 한 후 확인하려면 sites-enabled 폴더 안에softLink로된 같은 파일이 잘 등록 되어있는지 확인합니다. softLink파일인지 확인하는 방법은 <code class="highlighter-rouge">ls -l</code> 명령어를 입력하였을 떄 
lrwxr-xr-x 1 test test 5 Mar 7 22:00 link1 -&gt; file1<br />
위와 같이 맨앞에 <code class="highlighter-rouge">l</code>문자와 <code class="highlighter-rouge">-&gt;</code>기호가 있으면됩니다. 우분투에서는 파일이 초록색으로 나오네요?ㅎㅎ</li>
  <li>해당 파일의 내용을 작성해봅니다.!</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="no">VirtualHost</span> <span class="o">*</span><span class="p">:</span><span class="mi">80</span><span class="o">&gt;</span>  
<span class="c1">#The Server Name directive sets the request schema, hostname and port that  </span>
<span class="c1">#the server uses to identify itself. This is used when creating  </span>
<span class="c1">#redirection URLs. In the context of virtual hosts, the ServerName  </span>
<span class="c1">#specifies what hostname must appear in the request's Host: header to  </span>
<span class="c1">#match this virtual host. For the default virtual host (this file) this  </span>
<span class="c1">#value is not decisive as it is used as a last resort host regardless.  </span>
<span class="c1">#However, you must set it for any further virtual host explicitly.  </span>
<span class="c1">#ServerName www.example.com  </span>

<span class="no">ServerAdmin</span> <span class="n">webmaster</span><span class="vi">@localhost</span>  
<span class="no">DocumentRoot</span> <span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">html</span>  

<span class="c1">#Available loglevels: trace8, ..., trace1, debug, info, notice, warn,  </span>
<span class="c1">#error, crit, alert, emerg.  </span>
<span class="c1">#It is also possible to configure the loglevel for particular  </span>
<span class="c1">#modules, e.g.  </span>
<span class="c1">#LogLevel info ssl:warn  </span>

<span class="no">ErrorLog</span> <span class="err">$</span><span class="p">{</span><span class="no">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">error</span><span class="p">.</span><span class="nf">log</span>  
<span class="no">CustomLog</span> <span class="err">$</span><span class="p">{</span><span class="no">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">access</span><span class="p">.</span><span class="nf">log</span> <span class="n">combined</span>  

<span class="c1">#For most configuration files from conf-availalbe/, which are  </span>
<span class="c1">#enabled or disabled at a global level, it is possible to  </span>
<span class="c1">#include a line for only one particular virtual host. For example the  </span>
<span class="c1">#follwing line enables the CGI configuration for this host only  </span>
<span class="c1">#after it has been globally disabled with "a2disconf".  </span>
<span class="c1">#Include conf-available/serve-cgi-bin.conf  </span>
  
<span class="no">ProxyPass</span> <span class="sr">/url http:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">url</span></code></pre></figure>

<p><code class="highlighter-rouge">ProxyPass</code>부분을 보시면 됩니다. <code class="highlighter-rouge">ProxyPass 접속url nodejsurl</code> 이러한 형식으로 설정을 계속 추가해 보시면 웹에서 접속url에 접근하였을때 nodejsUrl로 전달해주는 방식이 됩니다.!<br />
<code class="highlighter-rouge">service apache restart</code> 이후 apache를 재시작 해주시면 설정이 적용됩니다!!</p>

<p>생각외로 간단합니다! 하지만 안해보면 모른다는.. 한번 테스트 해보시면 좋을것 같네요~</p>

<p>지금까지 <strong>Node.js 와 Apache 연동 방법</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>

	<item>
	  <title>[운영체제] 리눅스 부팅 USB 만들기</title>
	  <link>//boot-usb-create</link>
	  <author></author>
	  <pubDate>2018-10-14T21:00:00+09:00</pubDate>
	  <guid>//boot-usb-create</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 열번째 게시물입니다. ㅎㅎ<br />
벌써 열번째 게시물이네요~ 이제는 횟수를 적지 않을까 합니다. 이렇게 계속 포스팅해서 나중에 확인했을때 많이 쌓여있는걸 보면 뿌듯하겠죠? ㅎㅎ</p>

<p>이번에 포스팅할 내용은 리눅스 운영체제 부팅 USB륾 만드는 방법에대해 포스팅 하겠습니다.<br />
Rufus라는 툴을 이용하면 쉽게 이미지파일을 USB에 업로드하여 부팅 USB를 만들 수 있습니다. <br />
윈도우 운영체제인경우 마이크로소프트 사이트에 접속하시면 쉽게 부팅 USB를 만들 수 있습니다.</p>

<ul>
  <li><strong>Rufus 다운받기</strong></li>
  <li><strong>ISO 파일 다운받기</strong></li>
  <li><strong>부팅 USB 만들기</strong></li>
  <li><strong>USB 삽입 후 부팅하기</strong></li>
</ul>

<h2 id="1-rufus-설치-링크에-접속하기"><strong>1. Rufus <a href="https://www.techspot.com/downloads/6062-rufus.html">설치 링크</a>에 접속하기.</strong></h2>
<p>위에 링크로 접속하셔서 Rufus를 다운 받으셔야합니다.!</p>

<p><img src="/assets/images/2018-10-14-boot-usb-create/installation-step1.png" />
위에 사진에서 Installer를 클릭하시면 자동으로 설치가 진행됩니다.</p>

<p>Rufus 설치가 완료되고 파일을 실행했을때의 모습입니다.<br />
<img src="/assets/images/2018-10-14-boot-usb-create/installation-step2.png" /></p>

<h2 id="2iso-파일-다운받기"><strong>2.ISO 파일 다운받기</strong></h2>
<p>운영체제를 컴퓨터에 설치하기 위해서는 자신이 설치하고자 하는 운영체제 파일이 있어야겠죠?<br />
그렇다면 운영체제 이미지 파일을 설치해 봅시다!</p>

<ol>
  <li><a href="https://www.debian.org/CD/http-ftp/">debian</a></li>
  <li><a href="https://www.ubuntu.com/download">ubuntu</a></li>
  <li><a href="https://www.archlinux.org/download/">arch</a></li>
  <li><a href="https://getfedora.org/">fedora</a></li>
  <li><a href="https://wiki.centos.org/?id=15">centOS</a></li>
  <li><a href="https://www.redhat.com/en/store">redHat</a></li>
</ol>

<p>해당 링크 중 자신이 설치하고자 하는 운영체제 링크에 접속하여 ISO 파일으르 다운 받으시면 됩니다.!</p>

<h2 id="3-부팅-usb-만들기"><strong>3. 부팅 USB 만들기</strong></h2>
<p>Rufus와 운영체제 ISO 파일을 다운받으셨다면 이제 부팅 USB를 만들어보겠습니다!</p>

<ul>
  <li>장치 : OS를 설치할 “USB를 선택”합니다.</li>
  <li>디스크 형식와 부팅 시스템 유형 : MBR 파티션 형식의 BIOS 또는 UEFI(BIOS 호환)을 선택합니다.</li>
  <li>MBR(MASTER BOOT RECORD) : 가장 보편화된 디스크 파티션 기술로 디스크의 첫번재 센터를 말한다.</li>
  <li>GPT(GUID PARTION TABLE) : MBR의 기술적 제한의 해결하기 위해 나온 디스크 파티션 기술을 말합니다</li>
  <li>BIOS(BASIC INPUT/OUTPUT SYSTEM) : 메이보드에 내장된 펌웨어로 CUI 기반입니다.</li>
  <li>
    <p>UEFI(UNIFIED EXTENSIBLE FIRMWARE INTERFACE) : BIOS의 발전형이며 GUI 기반의 펌웨어입니다.</p>
  </li>
  <li>파일 시스템 : FAT32 을 선택합니다.</li>
  <li>할당 단위 크기 : 4096 bytes 을 선택합니다.</li>
  <li>배드섹터 검사 : 이미지가 제대로 설치 되었는지 무결성을 검사합니다. 체크 해제 합니다.</li>
  <li>빠른 포멧 : USB 포멧 방식입니다. 체크 합니다.</li>
</ul>

<p>기본적으로 특별한 설정을 하지 않는 이상 default값으로 설정하시면 됩니다.!
모든 설정을 마친 후 실행을 누르시면 자동으로 USB 포맷이 진행되고 부팅 USB가 만들어집니다.</p>

<h2 id="4-usb-삽입-후-부팅하기"><strong>4. USB 삽입 후 부팅하기</strong></h2>
<p>이제 모든 준비가 완료되었습니다.<br />
이제 컴퓨터를 재시작하고 바이오스 화면에서 부팅 순서를 변경해 줍니다.!<br />
컴퓨터를 부팅하는 화면에서 “F2”나 “DEL”키를 누르시면 바이오스 설정화면으로 넘어가집니다. <br />
부팅 화면이 빠르게 넘어갈 수 있으니 해당 키를 연타하시는게 좋을 것 같네요 ㅎㅎ<br />
바이오스 화면은 메인보드에 따라 다르므로 자신의 메인보드를 검색하셔서 찾아보는것도 좋은 방법입니다!<br />
기본적으로 ‘Boot Device Priority’에서 ‘1st Boot Device’로 boot순서를 변경 할 수 있습니다. <br />
이때 <code class="highlighter-rouge">1st Boot Device</code>를 아까 만든 <code class="highlighter-rouge">부팅 USB</code>로 설정하시면 되겠죠?<br />
설정을 저장한 후 다시 재부팅하시면 자동으로 운영체제의 설치 화면으로 넘어가게됩니다.!!</p>

<p>복잡한 과정인것 같지만 해보면 그렇게 복잡하지는 않습니다. ISO 파일 설치할 때 좀 걸린다는 점만 빼면..ㅎㅎ</p>

<p>지금까지 <strong>부팅 USB 만들기</strong>라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[Node.js] 윈도우에서 Node.js 설치</title>
	  <link>//nodejs-installation-window</link>
	  <author></author>
	  <pubDate>2018-10-14T07:00:00+09:00</pubDate>
	  <guid>//nodejs-installation-window</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 아홉번째 게시물입니다. ㅎㅎ<br />
이번에 포스팅할 내용은 여덟번째 내용이었던 <a href="https://ghwlchlaks.github.io/nodejs-installation-ubuntu/">리눅스에서 Node.js 설치</a>에 이어 윈도우 운영체제 환경에서 Node.js를 설치하는 방법에 대해서 알아보겠습니다.!</p>

<p><strong>1. Node.js <a href="https://nodejs.org/">공식 사이트</a>에 접속하기.</strong>
접속하시면 자신의 운영체제에 맞게 페이지가 등장합니다!<br />
<img src="/assets/images/2018-10-13-nodejs-installation-window/node-org.png" />
해당 페이지에서 LTS버전을 클릭하여 윈도우 node.js 설치 파일을 다운받습니다!</p>

<p><strong>2. 설치 진행</strong>
설치 파일을 더블클릭하여 윈도우에서 Node.js 설치를 진행합니다.
특별한 설정을 할 이유가 없으면 계속해서 Next를 클릭하여 진행합니다!</p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step1.png" /></p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step2.png" /></p>

<p>여기서는 nodejs 폴더를 지정해줍니다. default로 해둬 상관이없다면 <strong>Next!</strong><br />
<img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step3.png" /></p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-window-installation-step4.png" /></p>

<p>설치가 완료되고 나면 아까 폴더 경로를 설정한 위치로 이동합니다!<br />
<img src="/assets/images/2018-10-13-nodejs-installation-window/nodejs-folder.png" />
잘 설치된 것을 확인하시면됩니다.!</p>

<p>설치가 너무 쉽죠? ㅎㅎ</p>

<p><strong>3. 예제 코드 실행!</strong><br />
이제 예제 소스를 실행해 잘 설치가 되었는지 확인해 봅시다!
app.js를 만들어 전에 사용했던 예제소소를 여기서도 이용해보겠습니다.!</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Hello world"</span><span class="p">);</span>  </code></pre></figure>

<p>해당 내용을 작성 후 저장합니다.</p>

<p><img src="/assets/images/2018-10-13-nodejs-installation-window/node-example.png" /></p>

<p>위에 사진처럼 생성되면 됩니다!</p>

<p>이후 해당파일을 실행해 보겠습니다.
cmd를 이용하여 해당 파일의 경로로 이동 후 <code class="highlighter-rouge">node app.js</code>로 해당파일을 실행할 수 있습니다.!<br />
결과는 역시 <strong>Hello world</strong>겠죠?</p>

<p>이번엔 <strong>간단한 웹서버</strong>를 만들어보겠습니다.<br />
<strong>app.js</strong>코드를 수정하도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">var</span> <span class="n">http</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">);</span>

<span class="n">var</span> <span class="n">server</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">(</span><span class="n">function</span> <span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">'Content-Type'</span> <span class="p">:</span> <span class="s1">'text/plain'</span> <span class="p">});</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="s1">'Hello World'</span><span class="p">);</span>
<span class="p">});</span>

<span class="n">server</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span></code></pre></figure>

<p>해당 내용을 작성 후</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="n">app</span><span class="p">.</span><span class="nf">js</span>  </code></pre></figure>

<p>를 실행하게 되면 간단하게 <strong>웹서버가</strong> 실행이 됩니다.<br />
물론 기능을 더 넣으려면 코드를 추가 해야겠죠?<br />
웹 서버가 실행이 됐는지 확인하는 방법은 http://127.0.0.1:3000으로 접속하시면 화면에 Hello World가 출력 되는 것을 확인 하실 수 있습니다.!</p>

<p>하지만 항상 cmd로 접속하여 경로를 찾고 실행시키면 번거롭겠죠?<br />
자신이 자주 사용하는 에디터에 콘솔 기능으로 쉽게 실행 시킬 수 있습니다. <br />
저는 VSCode를 사용하는데요 콘솔기능이 있어 에이터 안에서 서버를 실행 시킬 수 있어 편리하답니다!
여러분들도 자신이 주로 사용하는 에디터에서 쉽게 접근해 사용해보세요!!</p>

<p>지금까지 <strong>윈도우에서 Node.js설치 방법</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[Node.js] 리눅스에서 Node.js 설치</title>
	  <link>//nodejs-installation-ubuntu</link>
	  <author></author>
	  <pubDate>2018-10-12T07:00:00+09:00</pubDate>
	  <guid>//nodejs-installation-ubuntu</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 여덟번째 게시물입니다. ㅎㅎ<br />
오늘은 우분투 운영체제 환경에서 Node.js를 설치하는 방법에 대해서 알아보겠습니다.!</p>

<p><a href="https://github.com/nodesource/distributions">nodejs-github</a>과 <a href="https://nodejs.org/ko/download/package-manager/">nodejs공식페이지</a>을 보시면 잘 설명 되어있습니다.</p>

<p><strong>데비안(Debian)과 우분투(Ubuntu)에서 설치하는 방법.</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">-</span><span class="n">sL</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">deb</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_8</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="o">-</span><span class="no">E</span> <span class="n">bash</span> <span class="o">-</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">nodejs</span></code></pre></figure>

<p><code class="highlighter-rouge">Node.js 10를 사용하고 싶다면 다음을 실행합니다.</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">-</span><span class="n">sL</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">deb</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_10</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="o">-</span><span class="no">E</span> <span class="n">bash</span> <span class="o">-</span>  
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">nodejs</span>  </code></pre></figure>

<p>추가적으로<br />
<strong>RHEL, CentOS, Fedora에서 설치하는 방법</strong>도 간단하게 설명하겠습니다</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">--</span><span class="n">silent</span> <span class="o">--</span><span class="n">location</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">rpm</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_8</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">bash</span> <span class="o">-</span>  
<span class="n">sudo</span> <span class="n">yum</span> <span class="o">-</span><span class="n">y</span> <span class="n">install</span> <span class="n">nodejs</span>  </code></pre></figure>

<p><code class="highlighter-rouge">Node.js 10를 사용하고 싶다면 다음을 실행합니다.</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">--</span><span class="n">silent</span> <span class="o">--</span><span class="n">location</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">rpm</span><span class="p">.</span><span class="nf">nodesource</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">setup_10</span><span class="p">.</span><span class="nf">x</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">bash</span> <span class="o">-</span>  
<span class="n">sudo</span> <span class="n">yum</span> <span class="o">-</span><span class="n">y</span> <span class="n">install</span> <span class="n">nodejs</span>  </code></pre></figure>

<p>설치가 아주 간단하죠?ㅎㅎ</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="o">-</span><span class="n">v</span>  
<span class="n">npm</span> <span class="o">-</span><span class="n">v</span>  </code></pre></figure>

<p>해당 명령어로 nodejs와 npm이 잘 설치 되었는지 확인합니다.</p>

<p>간단하게 예제 코드를 보도록 하겠습니다! <br />
<strong>app.js</strong>를 생성한 후</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Hello world"</span><span class="p">);</span>  </code></pre></figure>

<p>해당 내용을 작성 후 저장합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="n">app</span><span class="p">.</span><span class="nf">js</span>  
<span class="c1">#=&gt; Hello world  </span></code></pre></figure>

<p>해당 결과 값이 출력되면 됩니다!!</p>

<p>이번엔 <strong>간단한 웹서버</strong>를 만들어보겠습니다.<br />
Node.js가 다른 웹서버와 다른 장점 중 하나는 빠르게 웹서버를 만들 수 있는것입니다!ㅎㅎ<br />
<strong>app.js</strong>코드를 수정하도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">var</span> <span class="n">http</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">);</span>

<span class="n">var</span> <span class="n">server</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">(</span><span class="n">function</span> <span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">'Content-Type'</span> <span class="p">:</span> <span class="s1">'text/plain'</span> <span class="p">});</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="s1">'Hello World'</span><span class="p">);</span>
<span class="p">});</span>

<span class="n">server</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span></code></pre></figure>

<p>해당 내용을 작성 후</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span> <span class="n">app</span><span class="p">.</span><span class="nf">js</span>  </code></pre></figure>

<p>를 실행하게 되면 간단하게 <strong>웹서버가</strong> 실행이 됩니다.<br />
물론 기능을 더 넣으려면 코드를 추가 해야겠죠?<br />
웹 서버가 실행이 됐는지 확인하는 방법은 http://127.0.0.1:3000으로 접속하시면 화면에 Hello World가 출력 되는 것을 확인 하실 수 있습니다.!</p>

<p>지금까지 <strong>리눅스에서 Node.js설치 방법</strong>이라는 주제로 포스팅하였습니다!  <br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[Node.js] NodeJs란 무엇인가?</title>
	  <link>//what-nodejs</link>
	  <author></author>
	  <pubDate>2018-10-10T09:00:00+09:00</pubDate>
	  <guid>//what-nodejs</guid>
	  <description><![CDATA[
	     <p>안녕하세요! <strong>Do My Best 블로그</strong> 일곱번째 게시물입니다. ㅎㅎ<br />
전에 말씀 드렸다시피 오늘은 <strong>NodeJS란 무엇인가?</strong>라는 내용을 포스팅하려고 합니다.</p>

<p><strong>NodeJS는</strong> 확상성 있는 네트워크 애플리케이션 특히 서버사이드 개발에 
사용되는 소프트웨어 플랫폼입니다.<br />
작성 언어로 자바스크립트(JavaScript)를 활용하며 Non-blocking I/O와 단일 스레드 이벤트 루프를 통한 높은 처리 성능을 가지고 있습니다. <br />
그러니 Node.js를 사용하려면 자바스크립트를 알아야겠죠?</p>

<p><strong>Non-blocking I/O란?</strong>  <br />
기존의 I/O 처리 방법에는 I/O작업을 시작하면 
완료될 때 까지 기다리는 방법으로 수많은 I/O 작업이 있는 경우
I/O 작업이 진행되는 동안 프로그램이 아무일도 하지 않고 시간을 소비하게 만듭니다. <br />
하지만 Non-blocking I/O방식에서는 입출력 처리는 시작만 해둔 채 완료되지 않은 상태에서 다른 처리 작업을 계속 진행 할 수 있도록 멈추지 않고 입출력 처리를 기다리는 방법을 말합니다!</p>

<p>내장 HTTP 서버 라이브러리를 포함하고 있어 웹 서버에서 Apache, Nginx 등의 별도의 소프트웨어 없이 NodeJS만으로 동작하는 것이 가능하며 이를 통해 웹서버의 동작에 있어 더 많은 통제를 가능케 합니다.!</p>

<p><strong>단일 스레드 이벤트 루프란?</strong><br />
하나의 쓰레드(Thread)에서 이벤트 루프를 돌려, 이벤트가 발생하면 해당 되는 함수를 실행시키기 때문에 단일한 Thread로 여러 요청처리가 가능합니다. <br />
Event Loop는 단일 Thread지만 Thread Pool 내부는 여러개의 Thread를 사용하여 Event Loop가 Callback함수를 내부에 여러 Thread들에게 요청을 할당해 줍니다. 
그리고 작업이 끝난 작업들은 Event Loop가 순차적으로 Event Queue에 할당합니다.</p>

<p>그리고 한개 더 알아야할 것! <strong>비동기</strong>입니다.!</p>

<p><strong>비동기란?</strong><br />
간단합니다! <strong>순서가 정해지지 않는다</strong> 라는 의미입니다.<br />
비동기와 Non-blocking 방식이 같다고 생각하시분들이 있으실텐데요!   <strong>의미는 다릅니다.!</strong><br />
<strong>Non-blocking 방식</strong>은 입출력처리가 시작되고 완료되지 않은 상태에서 반환하여 다른 처리를 할 수 있도록 하는 것이고,  <strong>비동기 방식</strong>은 어떤 수행이 완료되었을 때 NodeJS의 콜백함수와 같은 신호를 보내 알려주는 것입니다!<br />
비동기방식에서는 함수를 호출한 쪽에서 처리하지 않고 콜백함수를 통해 처리합니다!</p>

<p>어려운내용이네요..ㅠㅠ 크게 <strong>NodeJS</strong>의 특징에대해서 알아보았습니다. 
그럼 이제 예제를 한번 해보고 마치도록 하겠습니다.</p>

<p><strong>NodeJS</strong>는 다른 서버언어와 다르게 간단히 코드 몇줄로 서버를 구성할 수 있습니다. 
아래 예시를 한번 봅시다! ㅎㅎ</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">var</span> <span class="n">http</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">);</span>

<span class="n">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">(</span><span class="n">function</span> <span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span><span class="p">:</span> <span class="s1">'text/plain'</span><span class="p">});</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="s1">'Hello World\n'</span><span class="p">);</span>
<span class="p">}).</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>

<span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s1">'Server running at http://localhost:3000/'</span><span class="p">);</span></code></pre></figure>

<p>한번 테스트해보시고 사용해보시면 좋을것같습니다.!<br />
지금까지 <strong>Node.js란?</strong>이라는 주제로 포스팅하였습니다!<br />
해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>

	  ]]></description>
	</item>


</channel>
</rss>
