<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ghwlchlaks.github.io/</title>
   
   <link>https://ghwlchlaks.github.io</link>
   <description>같이 배워가는 IT 블로그입니다~. Python, JavaScript, nodejs, Github, algorithm, etc</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>첫 출근</title>
	  <link>//firstWork</link>
	  <author></author>
	  <pubDate>2019-04-22T09:00:00+09:00</pubDate>
	  <guid>//firstWork</guid>
	  <description><![CDATA[
	     <p>안녕하세요 퇴근 후 작성하네요.</p>

<p>오늘은 첫 출근을 했습니다. 팀원분들이 다들 좋으신 분들이라 다행입니다. ㅎㅎ</p>

<p>당분간은 회사에 적응하는 시간을 가지는것같습니다.</p>

<p>빠르게 적응하고 많은 것을 배울 수 있는 기회가 되었음 좋겠습니다.</p>

<p>요즘은 일기 형식으로 많이 쓰는것 같네요. 빠르게 공부한 내용도 업로드 할 수 있도록 하겠습니다.</p>

<p>감사합니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>윈도우 apache php 설치</title>
	  <link>//php-apache-installation</link>
	  <author></author>
	  <pubDate>2019-04-22T09:00:00+09:00</pubDate>
	  <guid>//php-apache-installation</guid>
	  <description><![CDATA[
	     <h2 id="1-아파치-다운">1. <a href="https://www.apachelounge.com/download/">아파치 다운</a></h2>
<p>C드라이브에 압축해제
<img src="/assets/images/2019-04-23-php-apache-installation/apahcefolder.png" /></p>

<p>폴더내부에 Apache24/conf/httpd.conf 파일 수정</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Define SRVROOT "C:\자신의 apache폴더위치\Apache24"  
...  
ServerAdmin 자신의 이메일  
...  
ServerName localhost  

</code></pre></div></div>

<p>환경 변수 설정
path 변수 값 apache폴더/bin</p>

<p>관리자 권한으로 명령프롬프트 실행
httpd.exe -k install
httpd.exe -k start</p>

<p>localhost 접속 
it works가 출력되야 정상</p>

<h2 id="2-php-다운">2. <a href="https://windows.php.net/download">php 다운</a></h2>
<p>C드라이브에 압축해제
php.ini-production의 이름을 php.ini로 변경 후 내용 수정</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extension_dir = "C:\php가 설치된 폴더 경로\php\ext"
</code></pre></div></div>

<p>1번에서 진행했던 httpd.conf파일에 내용 추가</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LoadModule php7_module "C:\php가 설치된 폴더 경로\php\php7apache2_4.dll"
AddType application/x-httpd-php .php .html
AddHandler application/x-httpd-php .php .html
PHPIniDir "C:\php가 설치된 폴더 경로\php" 
</code></pre></div></div>

<p>httpd.exe -k restart</p>

<p>Apache24\htdocs에 test.php파일 추가
<img src="/assets/images/2019-04-23-php-apache-installation/code.png" /></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># test.php
<span class="cp">&lt;?php</span> <span class="nb">phpinfo</span><span class="p">();</span> <span class="cp">?&gt;</span>
</code></pre></div></div>

<p>localhost/test.php접속</p>

<h3 id="결과화면">결과화면</h3>
<p><img src="/assets/images/2019-04-23-php-apache-installation/result.png" /></p>

<p>위와같이 출력되면 정상적으로 php apache설치 및 연동이 된것입니다.</p>


	  ]]></description>
	</item>

	<item>
	  <title>첫 출근 전 날</title>
	  <link>//beforedaywork</link>
	  <author></author>
	  <pubDate>2019-04-21T09:00:00+09:00</pubDate>
	  <guid>//beforedaywork</guid>
	  <description><![CDATA[
	     <p>일주일간 많이 쉬고, 취업에 몰두하느라 못만났던 사람들을 만났습니다.</p>

<p>잠도 많이 자고, 휴식을 충분히 했습니다. ㅎㅎ 잠도 못자고 여러가지로 쌓인 스트레스도 많이 풀렸네요 ㅎㅎ</p>

<p>일주일간은 자바스크립트 기초를 다시 공부하는 시간을 가졌어요 ㅎㅎ</p>

<p>이제 내일이 출근입니다. 떨리기도하고 기대도 많이 되네요</p>

<p>잘 적응하고 열심히 하겠습니다.</p>

<p>모두들 화이팅 하시기 바랍니다.!!</p>

<p>감사합니다.</p>


	  ]]></description>
	</item>

	<item>
	  <title>최종 합격 리뷰</title>
	  <link>//final-interview</link>
	  <author></author>
	  <pubDate>2019-04-13T09:00:00+09:00</pubDate>
	  <guid>//final-interview</guid>
	  <description><![CDATA[
	     <p>드디어 최종 합격이 됐습니다!!</p>

<p>열심히 해보도록하겠습니다.!!</p>

<p>긴장이 풀리니 잠이 쏟아지네요.. 오늘도 계속 누워있었다는.. ㅎㅎ</p>

<p>당분간 휴식을 취하면서 일찍자는 습관을 다시 들여야겠습니다.</p>

<p>감사합니다!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>면접 공부04 (정리전)</title>
	  <link>//interview04</link>
	  <author></author>
	  <pubDate>2019-04-11T09:00:00+09:00</pubDate>
	  <guid>//interview04</guid>
	  <description><![CDATA[
	     <h2 id="면접-공부">면접 공부</h2>

<p>세션,쿠키,로컬스토리지 차이</p>
<ul>
  <li>
    <p>쿠키 : 서버측과 클라이언트측 양쪽에서 쿠키데이터를 사용하는 api가 존재하고, 소멸시간을 지정할 수 있으며, 4kb내의 데이터만 보관할 수 있습니다. 또한 매 http 통신시 쿠키 정보가 함께 전송되기 때문에 로컬/세션스토리지를 사용할때보다 미세하게나마 통신속도가 느림,</p>
  </li>
  <li>
    <p>로컬 스토리지 : 오직 클라이언트쪽에서만 작동이됩니다. 소멸시간이 없으며 사용자가 직접 지우거나 특정 조건이 만족된다면 소멸합니다. 로컬스토리지와 세션스토리지의 차이는 소멸 시점에 있습니다. 영구적인것과 영구적이지 않는 것의 차이입니다. 로컬스토리지는 사용자가 지우지 않는 이상 영구적으로 남아있지만 세션스토리지는 웹 브라우저를 닫는 순간 사라지게됩니다.</p>
  </li>
  <li>
    <p>세션 - 쿠키는 클라이언트에 세션은 서버에 저장, 쿠키는 클라이언트 로컬에 저장되기 때문에 보안에 취약하지만 세션은 서버에 저장하기 때문에 비교적 보안성이 좋다.</p>
  </li>
</ul>

<p>세션을 주로 사용하면 좋은데 왜 쿠키를 사용할까?</p>
<ul>
  <li>세션은 서버의 자원을 사용하기 때문에 무분별하게 만들다보면 서버의 메모리가 감당할 수 없어질 수가 있고 속도가 느려질 수 있기 때문이다.</li>
</ul>

<p>쿠키, 세션은 캐시와 다르다</p>
<ul>
  <li>캐시는 이미지나, css, js 파일등이 사용자의 브라우저에 저장되는 것, 이를 이용해 자원이 아껴지는 것</li>
</ul>

<p>성취감이 높았던 업무 경험 물어봄</p>
<ul>
  <li>가장 성취감이 높았던 경험은 공모전이었습니다. 이유는 처음으로 팀을 구성하여 참여했던 프로젝트이고 학부에서 배우는 과정을 제외하고 기술들에대해서 새롭게 공부하여 프로젝트를 구축한 경험 이를 통해 수상까지 했던 경험이라 팀원들과 저 모두 뿌듯하고 성취감이 높았던 경험이었습니다.</li>
</ul>

<p>리액트와 뷰의 차이
1) 데이터 변경 방법</p>
<ul>
  <li>name이 choi인 객체가 있다고 가정했을 때 해당 값을 변경하기 위해서 vue는 this.name=로 접근하여 변경하면 되지만, react에서는 this.setState()로 변경을 해야합니다. vue에서는 data를 업데이트할때마다 setState를 알아서 결합해줍니다.
그러면 react에서는 왜 setState를 필요로할까?</li>
  <li>react에서는 라이플사이클 중인 componentwillreceiveProps, shouldcomponentuUpdate등 이 존재하는데 state를 변경할때마다 다시 실행됩니다. 이 라이프사이클 메소드를 통해 변경된 state를 알기위해 사용합니다. 
공통점</li>
  <li>가상돔 사용</li>
  <li>컴포넌트 중심 개발</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>면접 과제 전형 후기</title>
	  <link>//interview-review</link>
	  <author></author>
	  <pubDate>2019-04-10T09:00:00+09:00</pubDate>
	  <guid>//interview-review</guid>
	  <description><![CDATA[
	     <h2 id="면접-과제-전형-후기">면접 과제 전형 후기</h2>

<p>과제내용은 자세하게는 밝히지 못하지만 SPA를 이용하여 대학교 수강신청을 통한 시간표 생성 웹 서비스를 만드는 과제 였습니다.</p>

<p>개발기간은 약 4일 정도 주어졌고 개인적으로 열심히 했다고 생각하고 제출을 했습니다.</p>

<p>나름 주어진 조건 이외에 있으면 좋을것같은 기능을 추가했습니다.</p>

<p>결과는 빠르게 연락이 왔습니다. 최종 면접 일정이 잡혔습니다. 좋은 결과가 있기를 기대하며 최종 면접 대비를 해보겠습니다. ㅎㅎ</p>

<p>짧은 면접과제 후기 입니다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>면접 공부04 (정리전)</title>
	  <link>//interview04</link>
	  <author></author>
	  <pubDate>2019-04-04T09:00:00+09:00</pubDate>
	  <guid>//interview04</guid>
	  <description><![CDATA[
	     <h2 id="면접-공부04">면접 공부04</h2>

<p>float을 없애는 방법</p>
<ul>
  <li>부모 요소에 overflow 속성 사용</li>
  <li>after 가상 선택자 사용 (클래스를 부여하지 않았지만 마치 역동적으로 클래스를 변경한 것과 같은 효과를 낼 수 있는 것)
-float으로 대응하는 방법</li>
</ul>

<p>display 종류</p>
<ul>
  <li>inline : 앞뒤로 줄바꿈 되지않음 (디폴트)</li>
  <li>block : 요소 앞뒤로 줄바꿈이됨</li>
  <li>none: 박스 생성 x, 공간차지 하지 않음</li>
  <li>inline-block : 박스 모양이 inline처럼 늘어섬</li>
</ul>

<p>position 종류</p>
<ul>
  <li>relative : static위치를 기준으로 주어진 픽셀만큼 이동 (상대적)</li>
  <li>absolute : position: static 속성을 가지고 있지 않은 부모 요소 기준으로 움짐임</li>
  <li>static : 디폴트 상태로 왼쪽에서 오른쪽, 위에서 아래로 쌓임</li>
  <li>fixed : 특정위치에 고정</li>
</ul>

<p>소프트웨어란?</p>
<ul>
  <li>컴퓨터 시스템을 효율적으로 운영하기위한 프로그램, 대표적으로 운영체제가 있다.</li>
</ul>

<p>웹프로그래밍이란?</p>
<ul>
  <li>사용자가 특정한 작업을 웹서버에 요청하게되면 서버가 이를 해결한 후 결과를 응답하는 구조이다.</li>
</ul>

<p>웹 처리 순서</p>
<ul>
  <li>1) 웹브라우저가 웹 서버에 어떠한 페이지를
요청</li>
  <li>2) 웹 서버는 웹 브라우저의 요청을 받아서 로직 처리</li>
  <li>3) 결과를 브라우저에게 전달</li>
</ul>

<p>oop란?</p>
<ul>
  <li>프로그래밍에 필요한 상태와 행위를 가진 객체를 만들고 객체들간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법</li>
</ul>

<p>apache nginx</p>
<ul>
  <li>apache는 접속당 cpu, memory 사용량이 상대적으로 많이 증가하여 무거운 소프트웨어</li>
  <li>apache keep alive방식은 일정시간 동안 접속을 끊지 않고 다음 접속을 기다린다. 정적인 파일들에대해 50%성능 향상을 보이지만 여러 사용자가 접속했을경우 성능저하가 급격하게 발생한다.</li>
  <li>mpm 방식은 apache가 받아들인 요청을 처리하기위해 child process로 분배하는 방식을 말한다.</li>
  <li>nginx event-driven 방식으로 cpu, memory사용량이 크게 증가하지 않는다.</li>
  <li>nginx 는 모듈을 설치 했을때 nginx자체를 재 컴파일 해야한다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>style-components와 React [styled-components]</title>
	  <link>//styled-components</link>
	  <author></author>
	  <pubDate>2019-03-30T10:00:00+09:00</pubDate>
	  <guid>//styled-components</guid>
	  <description><![CDATA[
	     <p>이번에는 React에서 styled-components 라이브러리를 사용하여 실습을 해보겠습니다.</p>

<p>먼저 styled-components <a href="https://www.styled-components.com/docs/basics#installation">링크</a> 입니다.</p>

<h2 id="순서">순서</h2>
<blockquote>
  <ul>
    <li>라이브러리 설치</li>
    <li>예제 실습</li>
  </ul>
</blockquote>

<h3 id="1-라이브러리-설치">1. 라이브러리 설치</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save styled-components
</code></pre></div></div>

<h3 id="2-예제-실습">2. 예제 실습</h3>
<h4 id="1">(1)</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import React, { Component } from 'react';
import './App.css';
import styled from 'styled-components'

class App extends Component {
  render() {
    return (
      &lt;Wrapper&gt;
        &lt;Title&gt;
          Hello World
        &lt;/Title&gt;
      &lt;/Wrapper&gt;
    );
  }
}

const Title = styled.h1`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
`;

const Wrapper = styled.section`
  padding: 4em;
  background: papayawhip;
`;

export default App;

</code></pre></div></div>

<h4 id="결과-화면-1">결과 화면 (1)</h4>
<p><img src="/assets/images/2019-03-30-styled-components/result1.png" /></p>

<p>css파일을 사용할 경우, css와 컴포넌트 파일이 떨어져있기 때문에 관리가 불편한 점이 있습니다. <br />
styled-components는 컴포넌트를 생성할때 스타일을 입히기 때문에 css파일을 따로 관리하지 않아도됩니다.</p>

<p>또한 props를 받아서 스타일에 적용시킬수도 있습니다.</p>
<h4 id="2">(2)</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import React, { Component } from 'react';
import './App.css';
import styled from 'styled-components'

class App extends Component {
  render() {
    return (
      &lt;div&gt;
        &lt;Button&gt;Normal&lt;/Button&gt;
        &lt;Button primary&gt;Primary&lt;/Button&gt;
      &lt;/div&gt;
    );
  }
}

const Button = styled.button`
  background: ${props =&gt; props.primary ? "palevioletred" : "white"};
  color: ${props =&gt; props.primary ? "white" : "palevioletred"};

  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;


export default App;

</code></pre></div></div>

<h4 id="결과화면-2">결과화면 (2)</h4>
<p><img src="/assets/images/2019-03-30-styled-components/result2.png" /></p>

<p>위 코드처럼 컴포넌트에 primary props의 존재 유무에 따라 스타일을 동적으로 지정할 수 있습니다.</p>

<p>다음 예제를 진행해 보겠습니다.</p>

<h4 id="3">(3)</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import React, { Component } from 'react';
import './App.css';
import styled from 'styled-components'

class App extends Component {
  render() {
    return (
      &lt;div&gt;
        &lt;Button&gt;Normal Button&lt;/Button&gt;
        &lt;TomatoButton&gt;Tomato Button&lt;/TomatoButton&gt;
      &lt;/div&gt;
    );
  }
}

const Button = styled.button`
  color: palevioletred;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

const TomatoButton = styled(Button)`
  color: tomato;
  border-color: tomato;
`;


export default App;

</code></pre></div></div>

<h4 id="결과화면-3">결과화면 (3)</h4>
<p><img src="/assets/images/2019-03-30-styled-components/result3.png" /></p>

<p>위에 코드는 style을 override한것입니다. 즉, 이전의 설정한 스타일을 포함하면서 새롭게 tomatobutton생성한 스타일로 덮어집니다.</p>

<p>이것으로 간단하게 styled-components 사용방법과 이점에대해서 알아봤습니다.</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>리눅스에서 지킬 설치 및 실행 [Jekyll]</title>
	  <link>//ubuntu-jekyll-installation</link>
	  <author></author>
	  <pubDate>2019-03-24T10:00:00+09:00</pubDate>
	  <guid>//ubuntu-jekyll-installation</guid>
	  <description><![CDATA[
	     <p>이번에는 리눅스 환경에서 jekyll를 설치하는 방법에대해서 알아보도록하겠습니다.</p>

<p>이번에 노트북을 리눅스 운영체제로 바꾸고 jekyll를 설치해본 경험을 바탕으로 작성하겠습니다.</p>

<p><strong>1. 루비 (Ruby) 설치!</strong><br />
먼저 ruby를 설치 해줍니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install ruby-dev
</code></pre></div></div>

<p><strong>2. 지킬 (Jekyll) 설치</strong><br />
jekyll를 설치 해보도록하겠습니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install jekyll
</code></pre></div></div>
<p>역시 리눅스는 간단한 명령어로 패키지를 설치할 수 있는 장점이 있네요 ㅎㅎ</p>

<p>하지만 jekyll 설치 애러가 나타나는 경우가 있습니다. 이때는 의존 소프트웨어를 설치해주어야합니다. 
참고한 <a href="https://github.com/sj26/mailcatcher/issues/144#issuecomment-48008579">링크</a>입니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install build-essential
</code></pre></div></div>
<p>해당 패키지가 설치되고 나서 다시 <code class="highlighter-rouge">apt-get install jekyll</code>명령어를 사용하시면 잘 작동하시는 것을 보실 수 있습니다.</p>

<p>이후 bundler를 설치 해줍니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install bundler 
bundle install
</code></pre></div></div>
<p>이때 nokogiri가 설치되지 않는 문제가 발생 할 수 있습니다. 
이때도 의존성 소프트웨어가 설치 되있지 않아서 생기는 문제입니다.
이 문제를 해결하기위해서는 해당 명령어를 이용하여 의존 패키지를 설치해줍니다.
참고한 <a href="https://nokogiri.org/tutorials/installing_nokogiri.html">링크</a>입니다.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install patch ruby-dev zlib1g-dev liblzma-dev
</code></pre></div></div>
<p>설치가 된 이후 다시 <code class="highlighter-rouge">bundle install</code>명령어를 이용하여 설치를 진행해주시면 됩니다.</p>

<p>이후 과정이 오류없이 설치가 완료된다면 <code class="highlighter-rouge">bundle exec jekyll serve</code>명령어를 이용하여 github-page를 실행할 수 있습니다 
오류 없이 실행이 된다면 <code class="highlighter-rouge">http://localhost:4000/</code>으로 접속하시면 자신이 폴더내에서 수정한 블로그를 확인 할 수 있습니다.<br />
수정이 끝난 후에는 git push를 통해 업로드 하시면 적용가능합니다!</p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~
같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>[React-native] 설치 방법</title>
	  <link>//react-native-installation</link>
	  <author></author>
	  <pubDate>2019-03-24T09:00:00+09:00</pubDate>
	  <guid>//react-native-installation</guid>
	  <description><![CDATA[
	     <h1 id="해당-게시글은-작성-진행-중입니다"><code class="highlighter-rouge">해당 게시글은 작성 진행 중입니다.</code></h1>

<p>사전의 설치되있어야하는 프로그램
안드로이드 스튜디오, jdk
<a href="[https://facebook.github.io/react-native/docs/getting-started.html]">참고 링크</a></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install -g react-native-cli
</code></pre></div></div>

<h2 id="안드로이드-스튜디오에서-설치할-라이브러리">안드로이드 스튜디오에서 설치할 라이브러리</h2>
<p>Android SDK <br />
Android SDK Platform - Android SDK Platform 28  <br />
Performance (Intel ® HAXM) (See here for AMD)<br />
Android Virtual Device<br />
Intel x86 Atom_64 System Image or Google APIs Intel x86 Atom System Image</p>

<h2 id="안드로이드-sdk-환경변수-설정">안드로이드 sdk 환경변수 설정</h2>
<p><img src="/assets/images/2019-03-23-react-native-installation/sdk_path.png" /></p>

<h2 id="platform-tools-path-설정">platform tools path 설정</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c:\Users\YOUR_USERNAME\AppData\Local\Android\Sdk\platform-tools
</code></pre></div></div>

<h2 id="안드로이드-스튜디오-emulator-실행">안드로이드 스튜디오 emulator 실행</h2>

<h2 id="프로젝트-생성">프로젝트 생성</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>react-native init firstProject
</code></pre></div></div>

<h2 id="연결된-디바이스-검색">연결된 디바이스 검색</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb devices
</code></pre></div></div>
<p><img src="/assets/images/2019-03-23-react-native-installation/adb_list.png" /></p>

<h2 id="프로젝트-안드로이드-emulator로-실행">프로젝트 안드로이드 emulator로 실행</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>react-native run-android
</code></pre></div></div>
<p><img src="/assets/images/2019-03-23-react-native-installation/result_android.png" /></p>

<p>해당 게시물에 문제가 있다면 댓글을 통해 피드백해주시면 감사하겠습니다~ 같이 공부해요~^^</p>

<p><code class="highlighter-rouge">방문해주신분들 댓글 한개씩 달아주시면 감사하겠습니다~~^^</code></p>


	  ]]></description>
	</item>


</channel>
</rss>
